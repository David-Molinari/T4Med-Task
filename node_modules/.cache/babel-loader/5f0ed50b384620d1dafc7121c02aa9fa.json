{"ast":null,"code":"var _jsxFileName = \"/Users/Dmolina5/Desktop/glucose-reader-app/glucose-reader-fe/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport './App.css';\nimport axios from \"axios\";\nimport moment from \"moment\";\nimport Nav from \"./components/Nav\";\nimport Graph from \"./components/Graph\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst GET_RANGES_AND_DATA = gql`\n  query GetRangesAndData {\n    ranges {\n      low_bound\n      high_bound\n      color\n    }\n    data {\n      result_id\n      result_dt_tm\n      glucose_level\n      glucose_level_unit\n      source\n    }\n  }\n`;\n\nfunction App() {\n  _s();\n\n  // const [glucoseData, setGlucoseData] = useState([])\n  // const [glucoseRanges, setGlucoseRanges] = useState([])\n  // const [selectedDates, setSelectedDates] = useState({\n  //   start: \"\",\n  //   end: \"\"\n  // })\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_RANGES_AND_DATA); // Fetch glucose data on app mount, and set initial state\n\n  useEffect(() => {\n    console.log(data); // axios.get(`https://caiken.dev.transformativemed.com/david-skills-test/data.php`)\n    //   .then(res => {\n    // let data = res.data\n    // setGlucoseData(data.glucose_data)\n    // setGlucoseRanges(data.glucose_ranges)\n    // let startDT = data.glucose_data[0].result_dt_tm\n    // let startD = moment(startDT.slice(0, startDT.search(\" \"))).format()\n    // let endDT = data.glucose_data[data.glucose_data.length - 1].result_dt_tm\n    // let endD = moment(endDT.slice(0, endDT.search(\" \"))).format()\n    // setSelectedDates({\n    //   start: startD,\n    //   end: endD\n    // })\n    // })\n  }, [data]); // const { loading, error, data } = useQuery(GET_RANGES_AND_DATA);\n\n  if (loading) return /*#__PURE__*/_jsxDEV(\"h1\", {\n    id: \"Loading\",\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n  if (error) return `${error}`;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Nav, {\n        rAndD: data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Graph, {\n        rAndD: data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n\n_s(App, \"MIyWK+WDGXozRNXYyIBuaVd7f4g=\", false, function () {\n  return [useQuery];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/Dmolina5/Desktop/glucose-reader-app/glucose-reader-fe/src/App.js"],"names":["React","useEffect","useState","axios","moment","Nav","Graph","useQuery","gql","GET_RANGES_AND_DATA","App","loading","error","data","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,WAAP;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,GAAP,MAAgB,kBAAhB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,SACEC,QADF,EAEEC,GAFF,QAGO,gBAHP;;;AAKA,MAAMC,mBAAmB,GAAGD,GAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAfA;;AAiBA,SAASE,GAAT,GAAe;AAAA;;AAEb;AACA;AACA;AACA;AACA;AACA;AAEA,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BN,QAAQ,CAACE,mBAAD,CAAzC,CATa,CAWb;;AACAR,EAAAA,SAAS,CAAC,MAAK;AACba,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ,EADa,CAEb;AACA;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACF;AACH,GAhBQ,EAgBN,CAACA,IAAD,CAhBM,CAAT,CAZa,CA8Bb;;AAEA,MAAIF,OAAJ,EAAa,oBACX;AAAI,IAAA,EAAE,EAAC,SAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADW;AAMb,MAAIC,KAAJ,EAAW,OAAQ,GAAEA,KAAM,EAAhB;AAEX,sBACE;AAAA,2BACI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACE,QAAC,GAAD;AAAK,QAAA,KAAK,EAAEC;AAAZ;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,KAAD;AAAO,QAAA,KAAK,EAAEA;AAAd;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ,mBADF;AAiBD;;GAzDQH,G;UAS0BH,Q;;;KAT1BG,G;AA2DT,eAAeA,GAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport './App.css';\nimport axios from \"axios\";\nimport moment from \"moment\";\nimport Nav from \"./components/Nav\";\nimport Graph from \"./components/Graph\";\nimport {\n  useQuery,\n  gql\n} from \"@apollo/client\";\n\nconst GET_RANGES_AND_DATA = gql`\n  query GetRangesAndData {\n    ranges {\n      low_bound\n      high_bound\n      color\n    }\n    data {\n      result_id\n      result_dt_tm\n      glucose_level\n      glucose_level_unit\n      source\n    }\n  }\n`;\n\nfunction App() {\n\n  // const [glucoseData, setGlucoseData] = useState([])\n  // const [glucoseRanges, setGlucoseRanges] = useState([])\n  // const [selectedDates, setSelectedDates] = useState({\n  //   start: \"\",\n  //   end: \"\"\n  // })\n\n  const { loading, error, data } = useQuery(GET_RANGES_AND_DATA);\n\n  // Fetch glucose data on app mount, and set initial state\n  useEffect(()=> {\n    console.log(data)\n    // axios.get(`https://caiken.dev.transformativemed.com/david-skills-test/data.php`)\n    //   .then(res => {\n        // let data = res.data\n        // setGlucoseData(data.glucose_data)\n        // setGlucoseRanges(data.glucose_ranges)\n        // let startDT = data.glucose_data[0].result_dt_tm\n        // let startD = moment(startDT.slice(0, startDT.search(\" \"))).format()\n        // let endDT = data.glucose_data[data.glucose_data.length - 1].result_dt_tm\n        // let endD = moment(endDT.slice(0, endDT.search(\" \"))).format()\n        // setSelectedDates({\n        //   start: startD,\n        //   end: endD\n        // })\n      // })\n  }, [data])\n\n  // const { loading, error, data } = useQuery(GET_RANGES_AND_DATA);\n\n  if (loading) return (\n    <h1 id=\"Loading\">\n      Loading...\n    </h1>\n  );\n\n  if (error) return `${error}`;\n\n  return (\n    <>\n        <div className=\"App\">\n          <Nav rAndD={data}/>\n          <Graph rAndD={data}/>\n        </div>\n      {/* {glucoseData.length ? \n        <div className=\"App\">\n          <Nav selectedDates={selectedDates} setSelectedDates={setSelectedDates} glucoseData={glucoseData}/>\n          <Graph selectedDates={selectedDates} glucoseData={glucoseData} glucoseRanges={glucoseRanges}/>\n        </div>\n      : \n      <h1 id=\"Loading\">\n        Loading...\n      </h1>} */}\n    </>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}