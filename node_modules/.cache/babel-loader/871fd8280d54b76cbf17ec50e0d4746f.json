{"ast":null,"code":"var _jsxFileName = \"/Users/Dmolina5/Desktop/T4Med-Task/t4med-task/src/components/Graph/index.js\";\nimport React from \"react\";\nimport './Graph.css';\nimport '../../jquery-loader';\nimport ReactFlot from 'react-flot';\nimport '../../../node_modules/react-flot/flot/jquery.flot.time.min';\nimport moment from 'moment';\nimport { createData } from './GraphUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Graph(props) {\n  let glucoseDBD = {};\n\n  for (let i = 0; i < props.glucoseData.length; i++) {\n    let reading = props.glucoseData[i];\n    let dT = reading.result_dt_tm;\n    let day = dT.slice(0, 10);\n\n    if (glucoseDBD[day] == undefined) {\n      glucoseDBD[day] = [reading];\n    } else {\n      glucoseDBD[day].push(reading);\n    }\n  }\n\n  let glucoseDBDArr = [];\n\n  for (let i = 0; i < Object.keys(glucoseDBD).length; i++) {\n    let date = Object.keys(glucoseDBD)[i];\n    glucoseDBDArr.push({\n      date: date,\n      result: glucoseDBD[date]\n    });\n  }\n\n  glucoseDBDArr.reverse();\n  let ticks = [[0, \"00:00\"]];\n\n  for (let i = 2; i < 25; i = i + 2) {\n    if (i < 10) {\n      ticks.push([i, `0${i}:00`]);\n    } else {\n      ticks.push([i, `${i}:00`]);\n    }\n  }\n\n  if (window.innerWidth < 725) {\n    ticks = [[0, \"00\"]];\n\n    for (let i = 2; i < 25; i = i + 2) {\n      if (i < 10) {\n        ticks.push([i, `0${i}`]);\n      } else {\n        ticks.push([i, `${i}`]);\n      }\n    }\n  }\n\n  const options = {\n    xaxis: {\n      min: 0,\n      max: 24,\n      mode: \"time\",\n      timeformat: \"%H:%M\",\n      ticks: ticks\n    },\n    yaxis: {\n      min: 0,\n      max: 700,\n      ticks: [100, 180]\n    },\n    series: {\n      lines: {\n        show: true\n      }\n    },\n    grid: {\n      clickable: true\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"Graphs\",\n    children: props.selectedDates.start.length > 0 ? glucoseDBDArr.map(item => {\n      let momentS = moment(props.selectedDates.start).format('L');\n      let momentE = moment(props.selectedDates.end).format('L');\n\n      if (item.date >= momentS && item.date <= momentE) {\n        let addClass = \"\";\n\n        if (momentS == momentE) {\n          addClass = \"onlyChart\";\n        } else if (momentS == item.date) {\n          addClass = \"lastChart\";\n        }\n\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `ChartContainer ${addClass}`,\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            className: \"ChartDate\",\n            children: item.date\n          }, `cd${item.date.replaceAll('/', '')}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(ReactFlot, {\n            id: `${item.date.replaceAll('/', '')}`,\n            className: \"FlotChart\",\n            data: createData(item, props),\n            options: options,\n            width: \"100%\",\n            height: \"250px\"\n          }, `rf${item.date.replaceAll('/', '')}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 33\n          }, this)]\n        }, `cc${item.date.replaceAll('/', '')}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 29\n        }, this);\n      }\n    }) : \" \"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n}\n\n_c = Graph;\nexport default Graph;\n\nvar _c;\n\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"sources":["/Users/Dmolina5/Desktop/T4Med-Task/t4med-task/src/components/Graph/index.js"],"names":["React","ReactFlot","moment","createData","Graph","props","glucoseDBD","i","glucoseData","length","reading","dT","result_dt_tm","day","slice","undefined","push","glucoseDBDArr","Object","keys","date","result","reverse","ticks","window","innerWidth","options","xaxis","min","max","mode","timeformat","yaxis","series","lines","show","grid","clickable","selectedDates","start","map","item","momentS","format","momentE","end","addClass","replaceAll"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport './Graph.css';\nimport '../../jquery-loader';\nimport ReactFlot from 'react-flot';\nimport '../../../node_modules/react-flot/flot/jquery.flot.time.min';\nimport moment from 'moment';\nimport { createData } from './GraphUtils';\n\nfunction Graph(props) {\n\n    let glucoseDBD = {}\n\n    for (let i = 0; i < props.glucoseData.length; i++) {\n        let reading = props.glucoseData[i]\n        let dT = reading.result_dt_tm\n        let day = dT.slice(0,10)\n        if (glucoseDBD[day] == undefined) {\n            glucoseDBD[day] = [reading]\n        } else {\n            glucoseDBD[day].push(reading)\n        }\n    }\n\n    let glucoseDBDArr = []\n\n    for (let i = 0; i < Object.keys(glucoseDBD).length; i++) {\n        let date = Object.keys(glucoseDBD)[i]\n        glucoseDBDArr.push({\n            date: date,\n            result: glucoseDBD[date]\n        })\n    }\n\n    glucoseDBDArr.reverse()\n\n    let ticks = [[0,\"00:00\"]]\n\n    for (let i = 2; i < 25; i = i + 2) {\n        if (i < 10) {\n            ticks.push([i, `0${i}:00`])\n        } else {\n            ticks.push([i, `${i}:00`]) \n        }\n    }\n\n    if (window.innerWidth < 725) {\n        ticks = [[0,\"00\"]]\n        for (let i = 2; i < 25; i = i + 2) {\n            if (i < 10) {\n                ticks.push([i, `0${i}`])\n            } else {\n                ticks.push([i, `${i}`]) \n            }\n        }\n    }\n\n    const options = {\n        xaxis: {\n            min: 0, \n            max: 24, \n            mode: \"time\", \n            timeformat: \"%H:%M\",\n            ticks: ticks\n        }, \n        yaxis: {\n            min: 0, \n            max: 700,\n            ticks: [100, 180]\n        },\n        series: {\n            lines: { show: true }\n        },\n        grid: {\n            clickable: true,\n        }\n    }\n\n    return (\n        <div id=\"Graphs\">\n            {\n            props.selectedDates.start.length > 0 ?\n                glucoseDBDArr.map((item) => {\n                    let momentS = moment(props.selectedDates.start).format('L')\n                    let momentE = moment(props.selectedDates.end).format('L')\n                    if (item.date >= momentS && item.date <= momentE) {\n                        let addClass = \"\"\n                        if (momentS == momentE) {\n                            addClass = \"onlyChart\"\n                        } else if (momentS == item.date) {\n                            addClass = \"lastChart\"\n                        }\n                        return (\n                            <div \n                                key={`cc${item.date.replaceAll('/', '')}`}\n                                className={`ChartContainer ${addClass}`}\n                            >\n                                <h5 \n                                    key={`cd${item.date.replaceAll('/', '')}`}\n                                    className=\"ChartDate\"\n                                >\n                                    {item.date}\n                                </h5>\n                                <ReactFlot\n                                    key={`rf${item.date.replaceAll('/', '')}`}\n                                    id={`${item.date.replaceAll('/', '')}`} \n                                    className=\"FlotChart\"\n                                    data={createData(item, props)} \n                                    options={options} \n                                    width=\"100%\" \n                                    height=\"250px\" \n                                />\n                            </div>\n                        )\n\n                    }\n                })\n            : \" \"\n            }\n        </div>\n    );\n}\n\nexport default Graph;"]},"metadata":{},"sourceType":"module"}