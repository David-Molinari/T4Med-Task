{"ast":null,"code":"var _jsxFileName = \"/Users/Dmolina5/Desktop/T4Med-Task/t4med-task/src/components/Graph/index.js\";\nimport React, { useEffect } from \"react\";\nimport './Graph.css';\nimport '../../jquery-loader';\nimport ReactFlot from 'react-flot';\nimport '../../../node_modules/react-flot/flot/jquery.flot.time.min';\nimport moment from 'moment';\nimport { createData } from './GraphUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Graph(props) {\n  let glucoseDBD = {};\n\n  for (let i = 0; i < props.glucoseData.length; i++) {\n    let reading = props.glucoseData[i];\n    let dT = reading.result_dt_tm;\n    let day = dT.slice(0, 10);\n\n    if (glucoseDBD[day] == undefined) {\n      glucoseDBD[day] = [reading];\n    } else {\n      glucoseDBD[day].push(reading);\n    }\n  }\n\n  let glucoseDBDArr = [];\n\n  for (let i = 0; i < Object.keys(glucoseDBD).length; i++) {\n    let date = Object.keys(glucoseDBD)[i];\n    glucoseDBDArr.push({\n      date: date,\n      result: glucoseDBD[date]\n    });\n  }\n\n  glucoseDBDArr.reverse(); // function createData(item) {\n  //     let data = []\n  //     for (let i = 0; i < props.glucoseRanges.length; i++) {\n  //         let dataObj = {\n  //             range: props.glucoseRanges[i].slice(0,2),\n  //             data: [],\n  //             color: props.glucoseRanges[i][2],\n  //             series: {\n  //                 lines: { \n  //                     show: true, \n  //                     fill: true, \n  //                     fillColor: {\n  //                         colors: [{ opacity: 1 }, { opacity: 1 } ]\n  //                     }\n  //                 }\n  //             }\n  //         }\n  //         data.push(dataObj)\n  //     }\n  //     for (let i0 = 0; i0 < item.result.length; i0++) {\n  //         for (let i1 = 0; i1 < data.length; i1++) {\n  //             let gL = item.result[i0].glucose_level\n  //             if (gL >= data[i1].range[0] && gL <= data[i1].range[1]) {\n  //                 let time = parseInt(item.result[i0].result_dt_tm.slice(11,13))\n  //                 data[i1].data.push([time, gL])\n  //             }\n  //         }\n  //     }\n  //     let TandGL = []\n  //     for (let i = 0; i< data.length; i++) {\n  //         if (data[i].data.length != undefined) {\n  //             data[i].data.forEach((arr) => {\n  //                 TandGL.push(arr)\n  //             })\n  //         }\n  //     }\n  //     TandGL.sort((a, b) => {\n  //         return a[0] - b[0]\n  //     })\n  //     let thresholds = []\n  //     for (let i = 0; i < props.glucoseRanges.length; i++) {\n  //         thresholds.push(props.glucoseRanges[i][0])\n  //         thresholds.push(props.glucoseRanges[i][1])\n  //     }\n  //     console.log(thresholds, TandGL)\n  //     let seriesArr = []\n  //     for (let i0 = 0; i0 < TandGL.length - 1; i0++) {\n  //         if (TandGL.length > 0 && TandGL[i0][1] < TandGL[i0+1][1]) {\n  //             let thresholdPasses = []\n  //             for (let i1 = 0; i1 < thresholds.length; i1++) {\n  //                 if (TandGL[i0][1] < thresholds[i1] && \n  //                     TandGL[i0+1][1] > thresholds[i1]) {\n  //                     thresholdPasses.push(thresholds[i1])\n  //                 }\n  //             }\n  //             if (seriesArr.length > 0) {\n  //                 seriesArr.push([\n  //                     seriesArr[seriesArr.length-1][1],\n  //                     TandGL[i0]\n  //                 ])\n  //             }\n  //             let currentSeries = [TandGL[i0]]\n  //             let totalTimeGap = TandGL[i0+1][0] - TandGL[i0][0]\n  //             let totalPointsGap = TandGL[i0+1][1] - TandGL[i0][1]\n  //             for (let i2 = 0; i2 < thresholdPasses.length; i2++) {\n  //                 let pointsDif = thresholdPasses[i2] - TandGL[i0][1]\n  //                 let percOfTot = pointsDif/totalPointsGap\n  //                 let timeToAdd = percOfTot * totalTimeGap \n  //                 let time = timeToAdd + TandGL[i0][0]\n  //                 currentSeries.push([time, thresholdPasses[i2]])\n  //                 if (i2 == thresholdPasses.length - 1 ) {\n  //                     currentSeries.push(TandGL[i0+1])\n  //                 }\n  //                 if (currentSeries.length == 2) {\n  //                     seriesArr.push(currentSeries)\n  //                     currentSeries = []\n  //                 }\n  //             }\n  //             if (thresholdPasses.length == 0) {\n  //                 currentSeries.push(TandGL[i0+1])\n  //                 seriesArr.push(currentSeries)\n  //             }\n  //         } else if (TandGL.length > 0 && TandGL[i0][1] > TandGL[i0+1][1]) {\n  //             let thresholdPasses = []\n  //             for (let i1 = 0; i1 < thresholds.length; i1++) {\n  //                 if (TandGL[i0+1][1] < thresholds[i1] && \n  //                     TandGL[i0][1] > thresholds[i1]) {\n  //                     thresholdPasses.push(thresholds[i1])\n  //                 }\n  //             }\n  //             if (seriesArr.length > 0) {\n  //                 seriesArr.push([\n  //                     seriesArr[seriesArr.length-1][1],\n  //                     TandGL[i0]\n  //                 ])\n  //             }\n  //             thresholdPasses.reverse()\n  //             let currentSeries = [TandGL[i0]]\n  //             let totalTimeGap = TandGL[i0][0] - TandGL[i0+1][0]\n  //             let totalPointsGap = TandGL[i0+1][1] - TandGL[i0][1]\n  //             for (let i2 = 0; i2 < thresholdPasses.length; i2++) {\n  //                 let pointsDif = TandGL[i0][1] - thresholdPasses[i2]\n  //                 let percOfTot = pointsDif/totalPointsGap\n  //                 let timeToAdd = percOfTot * totalTimeGap \n  //                 let time = timeToAdd + TandGL[i0][0]\n  //                 currentSeries.push([time, thresholdPasses[i2]])\n  //                 if (i2 == thresholdPasses.length - 1 ) {\n  //                     currentSeries.push(TandGL[i0+1])\n  //                     currentSeries.push(TandGL[i0+1])\n  //                 }\n  //                 if (currentSeries.length == 2) {\n  //                     seriesArr.push(currentSeries)\n  //                     currentSeries = []\n  //                 }\n  //             }\n  //             if (thresholdPasses.length == 0) {\n  //                 currentSeries.push(TandGL[i0+1])\n  //                 seriesArr.push(currentSeries)\n  //             }\n  //         }\n  //     }\n  //     console.log(seriesArr)\n  //     let dataToSend = []\n  //     for (let i0 = 0; i0 < seriesArr.length; i0++) {\n  //         let color\n  //         for (let i1 = 0; i1 < props.glucoseRanges; i1++) {\n  //             if (seriesArr[i0][0][1] > props.glucoseRanges[i1][0] &&\n  //                 seriesArr[i0][0][1] < props.glucoseRanges[i1][1]) {\n  //                 color = props.glucoseRanges[i1][2]\n  //             }\n  //         }\n  //         dataToSend.push({\n  //             data: seriesArr[i0],\n  //             color: color,\n  //             series: {\n  //                 lines: {\n  //                     lineWidth: 20,\n  //                     show: true, \n  //                     fill: true, \n  //                     fillColor: {\n  //                         colors: [{ opacity: 1 }, { opacity: 1 } ]\n  //                     }\n  //                 }\n  //             } \n  //         })\n  //     }\n  //     return dataToSend\n  // }\n\n  let ticks = [[0, \"00:00\"]];\n\n  for (let i = 2; i < 25; i = i + 2) {\n    if (i < 10) {\n      ticks.push([i, `0${i}:00`]);\n    } else {\n      ticks.push([i, `${i}:00`]);\n    }\n  }\n\n  if (window.innerWidth < 725) {\n    ticks = [[0, \"00\"]];\n\n    for (let i = 2; i < 25; i = i + 2) {\n      if (i < 10) {\n        ticks.push([i, `0${i}`]);\n      } else {\n        ticks.push([i, `${i}`]);\n      }\n    }\n  }\n\n  const options = {\n    xaxis: {\n      min: 0,\n      max: 24,\n      mode: \"time\",\n      timeformat: \"%H:%M\",\n      ticks: ticks\n    },\n    yaxis: {\n      min: 0,\n      max: 700,\n      ticks: [100, 180]\n    },\n    series: {\n      lines: {\n        show: true\n      } // points: { show: true }\n\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: props.selectedDates.start.length > 0 ? glucoseDBDArr.map(item => {\n      let momentS = moment(props.selectedDates.start).format('L');\n      let momentE = moment(props.selectedDates.end).format('L');\n\n      if (item.date >= momentS && item.date <= momentE) {\n        let addClass = \"\";\n\n        if (momentS == item.date || momentS == momentE) {\n          addClass = \"lastChart\";\n        }\n\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `ChartContainer ${addClass}`,\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            className: \"ChartDate\",\n            children: item.date\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(ReactFlot, {\n            id: `${item.date.replaceAll('/', '')}`,\n            className: \"FlotChart\",\n            data: createData(item, props),\n            options: options,\n            width: \"100%\",\n            height: \"250px\"\n          }, `key${item.date.replaceAll('/', '')}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 29\n        }, this);\n      }\n    }) : \" \"\n  }, void 0, false);\n}\n\n_c = Graph;\nexport default Graph;\n\nvar _c;\n\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"sources":["/Users/Dmolina5/Desktop/T4Med-Task/t4med-task/src/components/Graph/index.js"],"names":["React","useEffect","ReactFlot","moment","createData","Graph","props","glucoseDBD","i","glucoseData","length","reading","dT","result_dt_tm","day","slice","undefined","push","glucoseDBDArr","Object","keys","date","result","reverse","ticks","window","innerWidth","options","xaxis","min","max","mode","timeformat","yaxis","series","lines","show","selectedDates","start","map","item","momentS","format","momentE","end","addClass","replaceAll"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport './Graph.css';\nimport '../../jquery-loader';\nimport ReactFlot from 'react-flot';\nimport '../../../node_modules/react-flot/flot/jquery.flot.time.min';\nimport moment from 'moment';\nimport { createData } from './GraphUtils';\n\nfunction Graph(props) {\n\n    let glucoseDBD = {}\n\n    for (let i = 0; i < props.glucoseData.length; i++) {\n        let reading = props.glucoseData[i]\n        let dT = reading.result_dt_tm\n        let day = dT.slice(0,10)\n        if (glucoseDBD[day] == undefined) {\n            glucoseDBD[day] = [reading]\n        } else {\n            glucoseDBD[day].push(reading)\n        }\n    }\n\n    let glucoseDBDArr = []\n\n    for (let i = 0; i < Object.keys(glucoseDBD).length; i++) {\n        let date = Object.keys(glucoseDBD)[i]\n        glucoseDBDArr.push({\n            date: date,\n            result: glucoseDBD[date]\n        })\n    }\n\n    glucoseDBDArr.reverse()\n\n    // function createData(item) {\n    //     let data = []\n\n    //     for (let i = 0; i < props.glucoseRanges.length; i++) {\n    //         let dataObj = {\n    //             range: props.glucoseRanges[i].slice(0,2),\n    //             data: [],\n    //             color: props.glucoseRanges[i][2],\n    //             series: {\n    //                 lines: { \n    //                     show: true, \n    //                     fill: true, \n    //                     fillColor: {\n    //                         colors: [{ opacity: 1 }, { opacity: 1 } ]\n    //                     }\n    //                 }\n    //             }\n    //         }\n    //         data.push(dataObj)\n    //     }\n\n    //     for (let i0 = 0; i0 < item.result.length; i0++) {\n    //         for (let i1 = 0; i1 < data.length; i1++) {\n    //             let gL = item.result[i0].glucose_level\n    //             if (gL >= data[i1].range[0] && gL <= data[i1].range[1]) {\n    //                 let time = parseInt(item.result[i0].result_dt_tm.slice(11,13))\n    //                 data[i1].data.push([time, gL])\n    //             }\n    //         }\n    //     }\n\n    //     let TandGL = []\n\n    //     for (let i = 0; i< data.length; i++) {\n    //         if (data[i].data.length != undefined) {\n    //             data[i].data.forEach((arr) => {\n    //                 TandGL.push(arr)\n    //             })\n    //         }\n    //     }\n\n    //     TandGL.sort((a, b) => {\n    //         return a[0] - b[0]\n    //     })\n\n    //     let thresholds = []\n\n    //     for (let i = 0; i < props.glucoseRanges.length; i++) {\n    //         thresholds.push(props.glucoseRanges[i][0])\n    //         thresholds.push(props.glucoseRanges[i][1])\n    //     }\n\n    //     console.log(thresholds, TandGL)\n\n    //     let seriesArr = []\n\n    //     for (let i0 = 0; i0 < TandGL.length - 1; i0++) {\n    //         if (TandGL.length > 0 && TandGL[i0][1] < TandGL[i0+1][1]) {\n    //             let thresholdPasses = []\n    //             for (let i1 = 0; i1 < thresholds.length; i1++) {\n    //                 if (TandGL[i0][1] < thresholds[i1] && \n    //                     TandGL[i0+1][1] > thresholds[i1]) {\n    //                     thresholdPasses.push(thresholds[i1])\n    //                 }\n    //             }\n    //             if (seriesArr.length > 0) {\n    //                 seriesArr.push([\n    //                     seriesArr[seriesArr.length-1][1],\n    //                     TandGL[i0]\n    //                 ])\n    //             }\n    //             let currentSeries = [TandGL[i0]]\n    //             let totalTimeGap = TandGL[i0+1][0] - TandGL[i0][0]\n    //             let totalPointsGap = TandGL[i0+1][1] - TandGL[i0][1]\n    //             for (let i2 = 0; i2 < thresholdPasses.length; i2++) {\n    //                 let pointsDif = thresholdPasses[i2] - TandGL[i0][1]\n    //                 let percOfTot = pointsDif/totalPointsGap\n    //                 let timeToAdd = percOfTot * totalTimeGap \n    //                 let time = timeToAdd + TandGL[i0][0]\n    //                 currentSeries.push([time, thresholdPasses[i2]])\n    //                 if (i2 == thresholdPasses.length - 1 ) {\n    //                     currentSeries.push(TandGL[i0+1])\n    //                 }\n    //                 if (currentSeries.length == 2) {\n    //                     seriesArr.push(currentSeries)\n    //                     currentSeries = []\n    //                 }\n    //             }\n    //             if (thresholdPasses.length == 0) {\n    //                 currentSeries.push(TandGL[i0+1])\n    //                 seriesArr.push(currentSeries)\n    //             }\n    //         } else if (TandGL.length > 0 && TandGL[i0][1] > TandGL[i0+1][1]) {\n    //             let thresholdPasses = []\n    //             for (let i1 = 0; i1 < thresholds.length; i1++) {\n    //                 if (TandGL[i0+1][1] < thresholds[i1] && \n    //                     TandGL[i0][1] > thresholds[i1]) {\n    //                     thresholdPasses.push(thresholds[i1])\n    //                 }\n    //             }\n    //             if (seriesArr.length > 0) {\n    //                 seriesArr.push([\n    //                     seriesArr[seriesArr.length-1][1],\n    //                     TandGL[i0]\n    //                 ])\n    //             }\n    //             thresholdPasses.reverse()\n    //             let currentSeries = [TandGL[i0]]\n    //             let totalTimeGap = TandGL[i0][0] - TandGL[i0+1][0]\n    //             let totalPointsGap = TandGL[i0+1][1] - TandGL[i0][1]\n    //             for (let i2 = 0; i2 < thresholdPasses.length; i2++) {\n    //                 let pointsDif = TandGL[i0][1] - thresholdPasses[i2]\n    //                 let percOfTot = pointsDif/totalPointsGap\n    //                 let timeToAdd = percOfTot * totalTimeGap \n    //                 let time = timeToAdd + TandGL[i0][0]\n    //                 currentSeries.push([time, thresholdPasses[i2]])\n    //                 if (i2 == thresholdPasses.length - 1 ) {\n    //                     currentSeries.push(TandGL[i0+1])\n    //                     currentSeries.push(TandGL[i0+1])\n    //                 }\n    //                 if (currentSeries.length == 2) {\n    //                     seriesArr.push(currentSeries)\n    //                     currentSeries = []\n    //                 }\n    //             }\n    //             if (thresholdPasses.length == 0) {\n    //                 currentSeries.push(TandGL[i0+1])\n    //                 seriesArr.push(currentSeries)\n    //             }\n    //         }\n    //     }\n\n    //     console.log(seriesArr)\n\n    //     let dataToSend = []\n\n    //     for (let i0 = 0; i0 < seriesArr.length; i0++) {\n    //         let color\n    //         for (let i1 = 0; i1 < props.glucoseRanges; i1++) {\n    //             if (seriesArr[i0][0][1] > props.glucoseRanges[i1][0] &&\n    //                 seriesArr[i0][0][1] < props.glucoseRanges[i1][1]) {\n    //                 color = props.glucoseRanges[i1][2]\n    //             }\n    //         }\n    //         dataToSend.push({\n    //             data: seriesArr[i0],\n    //             color: color,\n    //             series: {\n    //                 lines: {\n    //                     lineWidth: 20,\n    //                     show: true, \n    //                     fill: true, \n    //                     fillColor: {\n    //                         colors: [{ opacity: 1 }, { opacity: 1 } ]\n    //                     }\n    //                 }\n    //             } \n    //         })\n    //     }\n\n    //     return dataToSend\n    // }\n\n    let ticks = [[0,\"00:00\"]]\n\n\n    for (let i = 2; i < 25; i = i + 2) {\n        if (i < 10) {\n            ticks.push([i, `0${i}:00`])\n        } else {\n            ticks.push([i, `${i}:00`]) \n        }\n    }\n\n    if (window.innerWidth < 725) {\n        ticks = [[0,\"00\"]]\n        for (let i = 2; i < 25; i = i + 2) {\n            if (i < 10) {\n                ticks.push([i, `0${i}`])\n            } else {\n                ticks.push([i, `${i}`]) \n            }\n        }\n    }\n\n    const options = {\n        xaxis: {\n            min: 0, \n            max: 24, \n            mode: \"time\", \n            timeformat: \"%H:%M\",\n            ticks: ticks\n        }, \n        yaxis: {\n            min: 0, \n            max: 700,\n            ticks: [100, 180]\n        },\n        series: {\n            lines: { show: true }\n            // points: { show: true }\n        }\n    }\n\n    return (\n        <>\n            {\n            props.selectedDates.start.length > 0 ?\n                glucoseDBDArr.map((item) => {\n                    let momentS = moment(props.selectedDates.start).format('L')\n                    let momentE = moment(props.selectedDates.end).format('L')\n                    if (item.date >= momentS && item.date <= momentE) {\n                        let addClass = \"\"\n                        if (momentS == item.date || momentS == momentE) {\n                            addClass = \"lastChart\"\n                        }\n                        return (\n                            <div className={`ChartContainer ${addClass}`}>\n                                <h5 className=\"ChartDate\">\n                                    {item.date}\n                                </h5>\n                                <ReactFlot \n                                key={`key${item.date.replaceAll('/', '')}`}\n                                id={`${item.date.replaceAll('/', '')}`} \n                                className=\"FlotChart\"\n                                data={createData(item, props)} \n                                options={options} \n                                width=\"100%\" \n                                height=\"250px\" \n                            />\n                            </div>\n                        )\n\n                    }\n                })\n            : \" \"\n            }\n        </>\n      );\n\n}\n\nexport default Graph;"]},"metadata":{},"sourceType":"module"}