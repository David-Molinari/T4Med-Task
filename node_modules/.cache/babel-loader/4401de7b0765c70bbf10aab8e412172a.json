{"ast":null,"code":"import $, { removeData } from \"jquery\";\nexport function createData(item, props) {\n  let data = [];\n\n  for (let i = 0; i < props.glucoseRanges.length; i++) {\n    let dataObj = {\n      range: props.glucoseRanges[i].slice(0, 2),\n      data: [],\n      color: props.glucoseRanges[i][2],\n      series: {\n        lines: {\n          show: true,\n          fill: true,\n          fillColor: {\n            colors: [{\n              opacity: 1\n            }, {\n              opacity: 1\n            }]\n          }\n        }\n      }\n    };\n    data.push(dataObj);\n  }\n\n  for (let i0 = 0; i0 < item.result.length; i0++) {\n    for (let i1 = 0; i1 < data.length; i1++) {\n      let gL = item.result[i0].glucose_level;\n\n      if (gL >= data[i1].range[0] && gL <= data[i1].range[1]) {\n        let time = parseInt(item.result[i0].result_dt_tm.slice(11, 13));\n        data[i1].data.push([time, gL]);\n      }\n    }\n  }\n\n  let TandGL = [];\n\n  for (let i = 0; i < data.length; i++) {\n    if (data[i].data.length != undefined) {\n      data[i].data.forEach(arr => {\n        TandGL.push(arr);\n      });\n    }\n  }\n\n  TandGL.sort((a, b) => {\n    return a[0] - b[0];\n  });\n  let thresholds = [];\n\n  for (let i = 0; i < props.glucoseRanges.length; i++) {\n    thresholds.push(props.glucoseRanges[i][0]);\n    thresholds.push(props.glucoseRanges[i][1]);\n  }\n\n  let seriesArr = [];\n\n  for (let i0 = 0; i0 < TandGL.length - 1; i0++) {\n    if (TandGL.length > 0 && TandGL[i0][1] < TandGL[i0 + 1][1]) {\n      let thresholdPasses = [];\n\n      for (let i1 = 0; i1 < thresholds.length; i1++) {\n        if (TandGL[i0][1] < thresholds[i1] && TandGL[i0 + 1][1] > thresholds[i1]) {\n          thresholdPasses.push(thresholds[i1]);\n        }\n      }\n\n      if (seriesArr.length > 0) {\n        seriesArr.push([seriesArr[seriesArr.length - 1][1], TandGL[i0]]);\n      }\n\n      let currentSeries = [TandGL[i0]];\n      let totalTimeGap = TandGL[i0 + 1][0] - TandGL[i0][0];\n      let totalPointsGap = TandGL[i0 + 1][1] - TandGL[i0][1];\n\n      for (let i2 = 0; i2 < thresholdPasses.length; i2++) {\n        let pointsDif = thresholdPasses[i2] - TandGL[i0][1];\n        let percOfTot = pointsDif / totalPointsGap;\n        let timeToAdd = percOfTot * totalTimeGap;\n        let time = timeToAdd + TandGL[i0][0];\n        currentSeries.push([time, thresholdPasses[i2]]);\n\n        if (i2 == thresholdPasses.length - 1) {\n          currentSeries.push(TandGL[i0 + 1]);\n        }\n\n        if (currentSeries.length == 2) {\n          seriesArr.push(currentSeries);\n          currentSeries = [];\n        }\n      }\n\n      if (thresholdPasses.length == 0) {\n        currentSeries.push(TandGL[i0 + 1]);\n        seriesArr.push(currentSeries);\n      }\n    } else if (TandGL.length > 0 && TandGL[i0][1] > TandGL[i0 + 1][1]) {\n      let thresholdPasses = [];\n\n      for (let i1 = 0; i1 < thresholds.length; i1++) {\n        if (TandGL[i0 + 1][1] < thresholds[i1] && TandGL[i0][1] > thresholds[i1]) {\n          thresholdPasses.push(thresholds[i1]);\n        }\n      }\n\n      if (seriesArr.length > 0) {\n        seriesArr.push([seriesArr[seriesArr.length - 1][1], TandGL[i0]]);\n      }\n\n      thresholdPasses.reverse();\n      let currentSeries = [TandGL[i0]];\n      let totalTimeGap = TandGL[i0][0] - TandGL[i0 + 1][0];\n      let totalPointsGap = TandGL[i0 + 1][1] - TandGL[i0][1];\n\n      for (let i2 = 0; i2 < thresholdPasses.length; i2++) {\n        let pointsDif = TandGL[i0][1] - thresholdPasses[i2];\n        let percOfTot = pointsDif / totalPointsGap;\n        let timeToAdd = percOfTot * totalTimeGap;\n        let time = timeToAdd + TandGL[i0][0];\n        currentSeries.push([time, thresholdPasses[i2]]);\n\n        if (i2 == thresholdPasses.length - 1) {\n          currentSeries.push(TandGL[i0 + 1]);\n          currentSeries.push(TandGL[i0 + 1]);\n        }\n\n        if (currentSeries.length == 2) {\n          seriesArr.push(currentSeries);\n          currentSeries = [];\n        }\n      }\n\n      if (thresholdPasses.length == 0) {\n        currentSeries.push(TandGL[i0 + 1]);\n        seriesArr.push(currentSeries);\n      }\n    }\n  }\n\n  let dataToSend = [];\n\n  for (let i0 = 0; i0 < seriesArr.length; i0++) {\n    let avg = (seriesArr[i0][0][1] + seriesArr[i0][1][1]) / 2;\n    let color;\n\n    for (let i1 = 0; i1 < props.glucoseRanges.length; i1++) {\n      if (avg > props.glucoseRanges[i1][0] && avg < props.glucoseRanges[i1][1]) {\n        color = props.glucoseRanges[i1][2];\n        break;\n      }\n    }\n\n    dataToSend.push({\n      data: seriesArr[i0],\n      color: color,\n      points: {\n        show: true,\n        fill: true,\n        fillColor: {\n          colors: [{\n            opacity: 1\n          }, {\n            opacity: 1\n          }]\n        }\n      },\n      // series: {\n      //     lines: {\n      //         show: true, \n      //         fill: true, \n      //         fillColor: {\n      //             colors: [{ opacity: 1 }, { opacity: 1 } ]\n      //         },\n      //     },\n      //     points: {\n      //         show: true,\n      //         fill: true,\n      //         fillColor: {\n      //             colors: [{ opacity: 1 }, { opacity: 1 } ]\n      //         },\n      //     }\n      // },\n      clickable: true\n    });\n    console.log(dataToSend);\n  }\n\n  $(`#${item.date.replaceAll('/', '')}`).on('plotclick', function (event, pos, item) {\n    console.log(event, pos, item);\n  });\n  return dataToSend;\n}\nexport function createOptions() {}","map":{"version":3,"sources":["/Users/Dmolina5/Desktop/T4Med-Task/t4med-task/src/components/Graph/GraphUtils.js"],"names":["$","removeData","createData","item","props","data","i","glucoseRanges","length","dataObj","range","slice","color","series","lines","show","fill","fillColor","colors","opacity","push","i0","result","i1","gL","glucose_level","time","parseInt","result_dt_tm","TandGL","undefined","forEach","arr","sort","a","b","thresholds","seriesArr","thresholdPasses","currentSeries","totalTimeGap","totalPointsGap","i2","pointsDif","percOfTot","timeToAdd","reverse","dataToSend","avg","points","clickable","console","log","date","replaceAll","on","event","pos","createOptions"],"mappings":"AAAA,OAAOA,CAAP,IAAYC,UAAZ,QAA8B,QAA9B;AAEA,OAAO,SAASC,UAAT,CAAoBC,IAApB,EAA0BC,KAA1B,EAAiC;AACpC,MAAIC,IAAI,GAAG,EAAX;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACG,aAAN,CAAoBC,MAAxC,EAAgDF,CAAC,EAAjD,EAAqD;AACjD,QAAIG,OAAO,GAAG;AACVC,MAAAA,KAAK,EAAEN,KAAK,CAACG,aAAN,CAAoBD,CAApB,EAAuBK,KAAvB,CAA6B,CAA7B,EAA+B,CAA/B,CADG;AAEVN,MAAAA,IAAI,EAAE,EAFI;AAGVO,MAAAA,KAAK,EAAER,KAAK,CAACG,aAAN,CAAoBD,CAApB,EAAuB,CAAvB,CAHG;AAIVO,MAAAA,MAAM,EAAE;AACJC,QAAAA,KAAK,EAAE;AACHC,UAAAA,IAAI,EAAE,IADH;AAEHC,UAAAA,IAAI,EAAE,IAFH;AAGHC,UAAAA,SAAS,EAAE;AACPC,YAAAA,MAAM,EAAE,CAAC;AAAEC,cAAAA,OAAO,EAAE;AAAX,aAAD,EAAiB;AAAEA,cAAAA,OAAO,EAAE;AAAX,aAAjB;AADD;AAHR;AADH;AAJE,KAAd;AAcAd,IAAAA,IAAI,CAACe,IAAL,CAAUX,OAAV;AACH;;AAED,OAAK,IAAIY,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGlB,IAAI,CAACmB,MAAL,CAAYd,MAAlC,EAA0Ca,EAAE,EAA5C,EAAgD;AAC5C,SAAK,IAAIE,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGlB,IAAI,CAACG,MAA3B,EAAmCe,EAAE,EAArC,EAAyC;AACrC,UAAIC,EAAE,GAAGrB,IAAI,CAACmB,MAAL,CAAYD,EAAZ,EAAgBI,aAAzB;;AACA,UAAID,EAAE,IAAInB,IAAI,CAACkB,EAAD,CAAJ,CAASb,KAAT,CAAe,CAAf,CAAN,IAA2Bc,EAAE,IAAInB,IAAI,CAACkB,EAAD,CAAJ,CAASb,KAAT,CAAe,CAAf,CAArC,EAAwD;AACpD,YAAIgB,IAAI,GAAGC,QAAQ,CAACxB,IAAI,CAACmB,MAAL,CAAYD,EAAZ,EAAgBO,YAAhB,CAA6BjB,KAA7B,CAAmC,EAAnC,EAAsC,EAAtC,CAAD,CAAnB;AACAN,QAAAA,IAAI,CAACkB,EAAD,CAAJ,CAASlB,IAAT,CAAce,IAAd,CAAmB,CAACM,IAAD,EAAOF,EAAP,CAAnB;AACH;AACJ;AACJ;;AAED,MAAIK,MAAM,GAAG,EAAb;;AAEA,OAAK,IAAIvB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAED,IAAI,CAACG,MAAxB,EAAgCF,CAAC,EAAjC,EAAqC;AACjC,QAAID,IAAI,CAACC,CAAD,CAAJ,CAAQD,IAAR,CAAaG,MAAb,IAAuBsB,SAA3B,EAAsC;AAClCzB,MAAAA,IAAI,CAACC,CAAD,CAAJ,CAAQD,IAAR,CAAa0B,OAAb,CAAsBC,GAAD,IAAS;AAC1BH,QAAAA,MAAM,CAACT,IAAP,CAAYY,GAAZ;AACH,OAFD;AAGH;AACJ;;AAEDH,EAAAA,MAAM,CAACI,IAAP,CAAY,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAClB,WAAOD,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAC,CAAC,CAAD,CAAf;AACH,GAFD;AAIA,MAAIC,UAAU,GAAG,EAAjB;;AAEA,OAAK,IAAI9B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACG,aAAN,CAAoBC,MAAxC,EAAgDF,CAAC,EAAjD,EAAqD;AACjD8B,IAAAA,UAAU,CAAChB,IAAX,CAAgBhB,KAAK,CAACG,aAAN,CAAoBD,CAApB,EAAuB,CAAvB,CAAhB;AACA8B,IAAAA,UAAU,CAAChB,IAAX,CAAgBhB,KAAK,CAACG,aAAN,CAAoBD,CAApB,EAAuB,CAAvB,CAAhB;AACH;;AAED,MAAI+B,SAAS,GAAG,EAAhB;;AAEA,OAAK,IAAIhB,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGQ,MAAM,CAACrB,MAAP,GAAgB,CAAtC,EAAyCa,EAAE,EAA3C,EAA+C;AAC3C,QAAIQ,MAAM,CAACrB,MAAP,GAAgB,CAAhB,IAAqBqB,MAAM,CAACR,EAAD,CAAN,CAAW,CAAX,IAAgBQ,MAAM,CAACR,EAAE,GAAC,CAAJ,CAAN,CAAa,CAAb,CAAzC,EAA0D;AACtD,UAAIiB,eAAe,GAAG,EAAtB;;AACA,WAAK,IAAIf,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGa,UAAU,CAAC5B,MAAjC,EAAyCe,EAAE,EAA3C,EAA+C;AAC3C,YAAIM,MAAM,CAACR,EAAD,CAAN,CAAW,CAAX,IAAgBe,UAAU,CAACb,EAAD,CAA1B,IACAM,MAAM,CAACR,EAAE,GAAC,CAAJ,CAAN,CAAa,CAAb,IAAkBe,UAAU,CAACb,EAAD,CADhC,EACsC;AAClCe,UAAAA,eAAe,CAAClB,IAAhB,CAAqBgB,UAAU,CAACb,EAAD,CAA/B;AACH;AACJ;;AACD,UAAIc,SAAS,CAAC7B,MAAV,GAAmB,CAAvB,EAA0B;AACtB6B,QAAAA,SAAS,CAACjB,IAAV,CAAe,CACXiB,SAAS,CAACA,SAAS,CAAC7B,MAAV,GAAiB,CAAlB,CAAT,CAA8B,CAA9B,CADW,EAEXqB,MAAM,CAACR,EAAD,CAFK,CAAf;AAIH;;AACD,UAAIkB,aAAa,GAAG,CAACV,MAAM,CAACR,EAAD,CAAP,CAApB;AACA,UAAImB,YAAY,GAAGX,MAAM,CAACR,EAAE,GAAC,CAAJ,CAAN,CAAa,CAAb,IAAkBQ,MAAM,CAACR,EAAD,CAAN,CAAW,CAAX,CAArC;AACA,UAAIoB,cAAc,GAAGZ,MAAM,CAACR,EAAE,GAAC,CAAJ,CAAN,CAAa,CAAb,IAAkBQ,MAAM,CAACR,EAAD,CAAN,CAAW,CAAX,CAAvC;;AACA,WAAK,IAAIqB,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGJ,eAAe,CAAC9B,MAAtC,EAA8CkC,EAAE,EAAhD,EAAoD;AAChD,YAAIC,SAAS,GAAGL,eAAe,CAACI,EAAD,CAAf,GAAsBb,MAAM,CAACR,EAAD,CAAN,CAAW,CAAX,CAAtC;AACA,YAAIuB,SAAS,GAAGD,SAAS,GAACF,cAA1B;AACA,YAAII,SAAS,GAAGD,SAAS,GAAGJ,YAA5B;AACA,YAAId,IAAI,GAAGmB,SAAS,GAAGhB,MAAM,CAACR,EAAD,CAAN,CAAW,CAAX,CAAvB;AACAkB,QAAAA,aAAa,CAACnB,IAAd,CAAmB,CAACM,IAAD,EAAOY,eAAe,CAACI,EAAD,CAAtB,CAAnB;;AACA,YAAIA,EAAE,IAAIJ,eAAe,CAAC9B,MAAhB,GAAyB,CAAnC,EAAuC;AACnC+B,UAAAA,aAAa,CAACnB,IAAd,CAAmBS,MAAM,CAACR,EAAE,GAAC,CAAJ,CAAzB;AACH;;AACD,YAAIkB,aAAa,CAAC/B,MAAd,IAAwB,CAA5B,EAA+B;AAC3B6B,UAAAA,SAAS,CAACjB,IAAV,CAAemB,aAAf;AACAA,UAAAA,aAAa,GAAG,EAAhB;AACH;AACJ;;AACD,UAAID,eAAe,CAAC9B,MAAhB,IAA0B,CAA9B,EAAiC;AAC7B+B,QAAAA,aAAa,CAACnB,IAAd,CAAmBS,MAAM,CAACR,EAAE,GAAC,CAAJ,CAAzB;AACAgB,QAAAA,SAAS,CAACjB,IAAV,CAAemB,aAAf;AACH;AACJ,KAnCD,MAmCO,IAAIV,MAAM,CAACrB,MAAP,GAAgB,CAAhB,IAAqBqB,MAAM,CAACR,EAAD,CAAN,CAAW,CAAX,IAAgBQ,MAAM,CAACR,EAAE,GAAC,CAAJ,CAAN,CAAa,CAAb,CAAzC,EAA0D;AAC7D,UAAIiB,eAAe,GAAG,EAAtB;;AACA,WAAK,IAAIf,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGa,UAAU,CAAC5B,MAAjC,EAAyCe,EAAE,EAA3C,EAA+C;AAC3C,YAAIM,MAAM,CAACR,EAAE,GAAC,CAAJ,CAAN,CAAa,CAAb,IAAkBe,UAAU,CAACb,EAAD,CAA5B,IACAM,MAAM,CAACR,EAAD,CAAN,CAAW,CAAX,IAAgBe,UAAU,CAACb,EAAD,CAD9B,EACoC;AAChCe,UAAAA,eAAe,CAAClB,IAAhB,CAAqBgB,UAAU,CAACb,EAAD,CAA/B;AACH;AACJ;;AACD,UAAIc,SAAS,CAAC7B,MAAV,GAAmB,CAAvB,EAA0B;AACtB6B,QAAAA,SAAS,CAACjB,IAAV,CAAe,CACXiB,SAAS,CAACA,SAAS,CAAC7B,MAAV,GAAiB,CAAlB,CAAT,CAA8B,CAA9B,CADW,EAEXqB,MAAM,CAACR,EAAD,CAFK,CAAf;AAIH;;AACDiB,MAAAA,eAAe,CAACQ,OAAhB;AACA,UAAIP,aAAa,GAAG,CAACV,MAAM,CAACR,EAAD,CAAP,CAApB;AACA,UAAImB,YAAY,GAAGX,MAAM,CAACR,EAAD,CAAN,CAAW,CAAX,IAAgBQ,MAAM,CAACR,EAAE,GAAC,CAAJ,CAAN,CAAa,CAAb,CAAnC;AACA,UAAIoB,cAAc,GAAGZ,MAAM,CAACR,EAAE,GAAC,CAAJ,CAAN,CAAa,CAAb,IAAkBQ,MAAM,CAACR,EAAD,CAAN,CAAW,CAAX,CAAvC;;AACA,WAAK,IAAIqB,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGJ,eAAe,CAAC9B,MAAtC,EAA8CkC,EAAE,EAAhD,EAAoD;AAChD,YAAIC,SAAS,GAAGd,MAAM,CAACR,EAAD,CAAN,CAAW,CAAX,IAAgBiB,eAAe,CAACI,EAAD,CAA/C;AACA,YAAIE,SAAS,GAAGD,SAAS,GAACF,cAA1B;AACA,YAAII,SAAS,GAAGD,SAAS,GAAGJ,YAA5B;AACA,YAAId,IAAI,GAAGmB,SAAS,GAAGhB,MAAM,CAACR,EAAD,CAAN,CAAW,CAAX,CAAvB;AACAkB,QAAAA,aAAa,CAACnB,IAAd,CAAmB,CAACM,IAAD,EAAOY,eAAe,CAACI,EAAD,CAAtB,CAAnB;;AACA,YAAIA,EAAE,IAAIJ,eAAe,CAAC9B,MAAhB,GAAyB,CAAnC,EAAuC;AACnC+B,UAAAA,aAAa,CAACnB,IAAd,CAAmBS,MAAM,CAACR,EAAE,GAAC,CAAJ,CAAzB;AACAkB,UAAAA,aAAa,CAACnB,IAAd,CAAmBS,MAAM,CAACR,EAAE,GAAC,CAAJ,CAAzB;AACH;;AACD,YAAIkB,aAAa,CAAC/B,MAAd,IAAwB,CAA5B,EAA+B;AAC3B6B,UAAAA,SAAS,CAACjB,IAAV,CAAemB,aAAf;AACAA,UAAAA,aAAa,GAAG,EAAhB;AACH;AACJ;;AACD,UAAID,eAAe,CAAC9B,MAAhB,IAA0B,CAA9B,EAAiC;AAC7B+B,QAAAA,aAAa,CAACnB,IAAd,CAAmBS,MAAM,CAACR,EAAE,GAAC,CAAJ,CAAzB;AACAgB,QAAAA,SAAS,CAACjB,IAAV,CAAemB,aAAf;AACH;AACJ;AACJ;;AAED,MAAIQ,UAAU,GAAG,EAAjB;;AAEA,OAAK,IAAI1B,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGgB,SAAS,CAAC7B,MAAhC,EAAwCa,EAAE,EAA1C,EAA8C;AAC1C,QAAI2B,GAAG,GAAG,CAACX,SAAS,CAAChB,EAAD,CAAT,CAAc,CAAd,EAAiB,CAAjB,IAAsBgB,SAAS,CAAChB,EAAD,CAAT,CAAc,CAAd,EAAiB,CAAjB,CAAvB,IAA4C,CAAtD;AACA,QAAIT,KAAJ;;AACA,SAAK,IAAIW,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGnB,KAAK,CAACG,aAAN,CAAoBC,MAA1C,EAAkDe,EAAE,EAApD,EAAwD;AACpD,UAAIyB,GAAG,GAAG5C,KAAK,CAACG,aAAN,CAAoBgB,EAApB,EAAwB,CAAxB,CAAN,IACAyB,GAAG,GAAG5C,KAAK,CAACG,aAAN,CAAoBgB,EAApB,EAAwB,CAAxB,CADV,EACsC;AAClCX,QAAAA,KAAK,GAAGR,KAAK,CAACG,aAAN,CAAoBgB,EAApB,EAAwB,CAAxB,CAAR;AACA;AACH;AACJ;;AACDwB,IAAAA,UAAU,CAAC3B,IAAX,CAAgB;AACZf,MAAAA,IAAI,EAAEgC,SAAS,CAAChB,EAAD,CADH;AAEZT,MAAAA,KAAK,EAAEA,KAFK;AAGZqC,MAAAA,MAAM,EAAE;AACJlC,QAAAA,IAAI,EAAE,IADF;AAEJC,QAAAA,IAAI,EAAE,IAFF;AAGJC,QAAAA,SAAS,EAAE;AACPC,UAAAA,MAAM,EAAE,CAAC;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAAD,EAAiB;AAAEA,YAAAA,OAAO,EAAE;AAAX,WAAjB;AADD;AAHP,OAHI;AAUZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA+B,MAAAA,SAAS,EAAE;AA1BC,KAAhB;AA4BAC,IAAAA,OAAO,CAACC,GAAR,CAAYL,UAAZ;AACH;;AAED/C,EAAAA,CAAC,CAAE,IAAGG,IAAI,CAACkD,IAAL,CAAUC,UAAV,CAAqB,GAArB,EAA0B,EAA1B,CAA8B,EAAnC,CAAD,CAAuCC,EAAvC,CAA0C,WAA1C,EAAuD,UAAUC,KAAV,EAAiBC,GAAjB,EAAsBtD,IAAtB,EAA4B;AAC/EgD,IAAAA,OAAO,CAACC,GAAR,CAAYI,KAAZ,EAAmBC,GAAnB,EAAwBtD,IAAxB;AACH,GAFD;AAIA,SAAO4C,UAAP;AACH;AAED,OAAO,SAASW,aAAT,GAAyB,CAE/B","sourcesContent":["import $, { removeData } from \"jquery\";\n\nexport function createData(item, props) {\n    let data = []\n\n    for (let i = 0; i < props.glucoseRanges.length; i++) {\n        let dataObj = {\n            range: props.glucoseRanges[i].slice(0,2),\n            data: [],\n            color: props.glucoseRanges[i][2],\n            series: {\n                lines: { \n                    show: true, \n                    fill: true, \n                    fillColor: {\n                        colors: [{ opacity: 1 }, { opacity: 1 } ]\n                    }\n                }\n            }\n        }\n        data.push(dataObj)\n    }\n\n    for (let i0 = 0; i0 < item.result.length; i0++) {\n        for (let i1 = 0; i1 < data.length; i1++) {\n            let gL = item.result[i0].glucose_level\n            if (gL >= data[i1].range[0] && gL <= data[i1].range[1]) {\n                let time = parseInt(item.result[i0].result_dt_tm.slice(11,13))\n                data[i1].data.push([time, gL])\n            }\n        }\n    }\n\n    let TandGL = []\n\n    for (let i = 0; i< data.length; i++) {\n        if (data[i].data.length != undefined) {\n            data[i].data.forEach((arr) => {\n                TandGL.push(arr)\n            })\n        }\n    }\n\n    TandGL.sort((a, b) => {\n        return a[0] - b[0]\n    })\n\n    let thresholds = []\n\n    for (let i = 0; i < props.glucoseRanges.length; i++) {\n        thresholds.push(props.glucoseRanges[i][0])\n        thresholds.push(props.glucoseRanges[i][1])\n    }\n\n    let seriesArr = []\n\n    for (let i0 = 0; i0 < TandGL.length - 1; i0++) {\n        if (TandGL.length > 0 && TandGL[i0][1] < TandGL[i0+1][1]) {\n            let thresholdPasses = []\n            for (let i1 = 0; i1 < thresholds.length; i1++) {\n                if (TandGL[i0][1] < thresholds[i1] && \n                    TandGL[i0+1][1] > thresholds[i1]) {\n                    thresholdPasses.push(thresholds[i1])\n                }\n            }\n            if (seriesArr.length > 0) {\n                seriesArr.push([\n                    seriesArr[seriesArr.length-1][1],\n                    TandGL[i0]\n                ])\n            }\n            let currentSeries = [TandGL[i0]]\n            let totalTimeGap = TandGL[i0+1][0] - TandGL[i0][0]\n            let totalPointsGap = TandGL[i0+1][1] - TandGL[i0][1]\n            for (let i2 = 0; i2 < thresholdPasses.length; i2++) {\n                let pointsDif = thresholdPasses[i2] - TandGL[i0][1]\n                let percOfTot = pointsDif/totalPointsGap\n                let timeToAdd = percOfTot * totalTimeGap \n                let time = timeToAdd + TandGL[i0][0]\n                currentSeries.push([time, thresholdPasses[i2]])\n                if (i2 == thresholdPasses.length - 1 ) {\n                    currentSeries.push(TandGL[i0+1])\n                }\n                if (currentSeries.length == 2) {\n                    seriesArr.push(currentSeries)\n                    currentSeries = []\n                }\n            }\n            if (thresholdPasses.length == 0) {\n                currentSeries.push(TandGL[i0+1])\n                seriesArr.push(currentSeries)\n            }\n        } else if (TandGL.length > 0 && TandGL[i0][1] > TandGL[i0+1][1]) {\n            let thresholdPasses = []\n            for (let i1 = 0; i1 < thresholds.length; i1++) {\n                if (TandGL[i0+1][1] < thresholds[i1] && \n                    TandGL[i0][1] > thresholds[i1]) {\n                    thresholdPasses.push(thresholds[i1])\n                }\n            }\n            if (seriesArr.length > 0) {\n                seriesArr.push([\n                    seriesArr[seriesArr.length-1][1],\n                    TandGL[i0]\n                ])\n            }\n            thresholdPasses.reverse()\n            let currentSeries = [TandGL[i0]]\n            let totalTimeGap = TandGL[i0][0] - TandGL[i0+1][0]\n            let totalPointsGap = TandGL[i0+1][1] - TandGL[i0][1]\n            for (let i2 = 0; i2 < thresholdPasses.length; i2++) {\n                let pointsDif = TandGL[i0][1] - thresholdPasses[i2]\n                let percOfTot = pointsDif/totalPointsGap\n                let timeToAdd = percOfTot * totalTimeGap \n                let time = timeToAdd + TandGL[i0][0]\n                currentSeries.push([time, thresholdPasses[i2]])\n                if (i2 == thresholdPasses.length - 1 ) {\n                    currentSeries.push(TandGL[i0+1])\n                    currentSeries.push(TandGL[i0+1])\n                }\n                if (currentSeries.length == 2) {\n                    seriesArr.push(currentSeries)\n                    currentSeries = []\n                }\n            }\n            if (thresholdPasses.length == 0) {\n                currentSeries.push(TandGL[i0+1])\n                seriesArr.push(currentSeries)\n            }\n        }\n    }\n\n    let dataToSend = []\n\n    for (let i0 = 0; i0 < seriesArr.length; i0++) {\n        let avg = (seriesArr[i0][0][1] + seriesArr[i0][1][1])/2\n        let color\n        for (let i1 = 0; i1 < props.glucoseRanges.length; i1++) {\n            if (avg > props.glucoseRanges[i1][0] &&\n                avg < props.glucoseRanges[i1][1]) {\n                color = props.glucoseRanges[i1][2]\n                break\n            }\n        }\n        dataToSend.push({\n            data: seriesArr[i0],\n            color: color,\n            points: {\n                show: true,\n                fill: true,\n                fillColor: {\n                    colors: [{ opacity: 1 }, { opacity: 1 } ]\n                },\n            },\n            // series: {\n            //     lines: {\n            //         show: true, \n            //         fill: true, \n            //         fillColor: {\n            //             colors: [{ opacity: 1 }, { opacity: 1 } ]\n            //         },\n            //     },\n            //     points: {\n            //         show: true,\n            //         fill: true,\n            //         fillColor: {\n            //             colors: [{ opacity: 1 }, { opacity: 1 } ]\n            //         },\n            //     }\n            // },\n            clickable: true\n        })\n        console.log(dataToSend)\n    }\n\n    $(`#${item.date.replaceAll('/', '')}`).on('plotclick', function (event, pos, item) {\n        console.log(event, pos, item)\n    });\n\n    return dataToSend\n}\n\nexport function createOptions() {\n\n}"]},"metadata":{},"sourceType":"module"}