{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useQuery, gql } from \"@apollo/client\";\nconst GET_RANGES_AND_DATA = gql`\n  query GetRangesAndData {\n    ranges {\n      low_bound\n      high_bound\n      color\n    }\n    data {\n      result_id\n      result_dt_tm\n      glucose_level\n      glucose_level_unit\n      source\n    }\n  }\n`;\nexport function GetRandD() {\n  _s();\n\n  const {\n    loading,\n    error,\n    rangesAndData\n  } = useQuery(GET_RANGES_AND_DATA);\n}\n\n_s(GetRandD, \"SOluy2T4H4TMrjfHY8dArn+rI94=\", false, function () {\n  return [useQuery];\n});\n\n_c = GetRandD;\nexport function hexToRgbA(hex, dec) {\n  if (hex != undefined) {\n    var c;\n\n    if (/^#([A-Fa-f0-9]{3}){1,2}$/.test(hex)) {\n      c = hex.substring(1).split('');\n\n      if (c.length == 3) {\n        c = [c[0], c[0], c[1], c[1], c[2], c[2]];\n      }\n\n      c = '0x' + c.join('');\n      return 'rgba(' + [c >> 16 & 255, c >> 8 & 255, c & 255].join(',') + `,${dec})`;\n    }\n\n    throw new Error('Bad Hex');\n  }\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"GetRandD\");","map":{"version":3,"sources":["/Users/Dmolina5/Desktop/glucose-reader-app/glucose-reader-fe/src/Utils.js"],"names":["useQuery","gql","GET_RANGES_AND_DATA","GetRandD","loading","error","rangesAndData","hexToRgbA","hex","dec","undefined","c","test","substring","split","length","join","Error"],"mappings":";;AAAA,SACIA,QADJ,EAEIC,GAFJ,QAGS,gBAHT;AAKA,MAAMC,mBAAmB,GAAGD,GAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAfA;AAiBA,OAAO,SAASE,QAAT,GAAoB;AAAA;;AACvB,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAAoCN,QAAQ,CAACE,mBAAD,CAAlD;AAEH;;GAHeC,Q;UAC8BH,Q;;;KAD9BG,Q;AAKhB,OAAO,SAASI,SAAT,CAAmBC,GAAnB,EAAwBC,GAAxB,EAA4B;AAC/B,MAAID,GAAG,IAAIE,SAAX,EAAsB;AAClB,QAAIC,CAAJ;;AACA,QAAG,2BAA2BC,IAA3B,CAAgCJ,GAAhC,CAAH,EAAwC;AACpCG,MAAAA,CAAC,GAAEH,GAAG,CAACK,SAAJ,CAAc,CAAd,EAAiBC,KAAjB,CAAuB,EAAvB,CAAH;;AACA,UAAGH,CAAC,CAACI,MAAF,IAAW,CAAd,EAAgB;AACZJ,QAAAA,CAAC,GAAE,CAACA,CAAC,CAAC,CAAD,CAAF,EAAOA,CAAC,CAAC,CAAD,CAAR,EAAaA,CAAC,CAAC,CAAD,CAAd,EAAmBA,CAAC,CAAC,CAAD,CAApB,EAAyBA,CAAC,CAAC,CAAD,CAA1B,EAA+BA,CAAC,CAAC,CAAD,CAAhC,CAAH;AACH;;AACDA,MAAAA,CAAC,GAAE,OAAKA,CAAC,CAACK,IAAF,CAAO,EAAP,CAAR;AACA,aAAO,UAAQ,CAAEL,CAAC,IAAE,EAAJ,GAAQ,GAAT,EAAeA,CAAC,IAAE,CAAJ,GAAO,GAArB,EAA0BA,CAAC,GAAC,GAA5B,EAAiCK,IAAjC,CAAsC,GAAtC,CAAR,GAAoD,IAAGP,GAAI,GAAlE;AACH;;AACD,UAAM,IAAIQ,KAAJ,CAAU,SAAV,CAAN;AACH;AACJ","sourcesContent":["import {\n    useQuery,\n    gql\n  } from \"@apollo/client\";\n\nconst GET_RANGES_AND_DATA = gql`\n  query GetRangesAndData {\n    ranges {\n      low_bound\n      high_bound\n      color\n    }\n    data {\n      result_id\n      result_dt_tm\n      glucose_level\n      glucose_level_unit\n      source\n    }\n  }\n`;\n\nexport function GetRandD() {\n    const { loading, error, rangesAndData } = useQuery(GET_RANGES_AND_DATA);\n\n}\n\nexport function hexToRgbA(hex, dec){\n    if (hex != undefined) {\n        var c;\n        if(/^#([A-Fa-f0-9]{3}){1,2}$/.test(hex)){\n            c= hex.substring(1).split('');\n            if(c.length== 3){\n                c= [c[0], c[0], c[1], c[1], c[2], c[2]];\n            }\n            c= '0x'+c.join('');\n            return 'rgba('+[(c>>16)&255, (c>>8)&255, c&255].join(',')+`,${dec})`;\n        }\n        throw new Error('Bad Hex');\n    }\n}"]},"metadata":{},"sourceType":"module"}