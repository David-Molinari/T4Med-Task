{"ast":null,"code":"var _jsxFileName = \"/Users/Dmolina5/Desktop/glucose-reader-app/glucose-reader-fe/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport './App.css';\nimport axios from \"axios\";\nimport moment from \"moment\";\nimport Nav from \"./components/Nav\";\nimport Graph from \"./components/Graph\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst GET_RANGES_AND_DATA = gql`\n  query GetRangesAndData {\n    ranges {\n      low_bound\n      high_bound\n      color\n    }\n    data {\n      result_id\n      result_dt_tm\n      glucose_level\n      glucose_level_unit\n      source\n    }\n  }\n`;\n\nfunction App() {\n  _s();\n\n  // const [glucoseData, setGlucoseData] = useState([])\n  // const [glucoseRanges, setGlucoseRanges] = useState([])\n  // const [selectedDates, setSelectedDates] = useState({\n  //   start: \"\",\n  //   end: \"\"\n  // })\n  // Fetch glucose data on app mount, and set initial state\n  // useEffect(()=> {\n  // axios.get(`https://caiken.dev.transformativemed.com/david-skills-test/data.php`)\n  //   .then(res => {\n  // let data = res.data\n  // setGlucoseData(data.glucose_data)\n  // setGlucoseRanges(data.glucose_ranges)\n  // let startDT = data.glucose_data[0].result_dt_tm\n  // let startD = moment(startDT.slice(0, startDT.search(\" \"))).format()\n  // let endDT = data.glucose_data[data.glucose_data.length - 1].result_dt_tm\n  // let endD = moment(endDT.slice(0, endDT.search(\" \"))).format()\n  // setSelectedDates({\n  //   start: startD,\n  //   end: endD\n  // })\n  // })\n  // }, [])\n  const {\n    loading,\n    error,\n    rangesAndData\n  } = useQuery(GET_RANGES_AND_DATA);\n  if (loading) return 'Loading...';\n  if (error) return `${error}`;\n\n  if (!loading) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: [/*#__PURE__*/_jsxDEV(Nav, {\n          rAndD: rangesAndData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Graph, {\n          rAndD: rangesAndData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this)\n    }, void 0, false);\n  }\n}\n\n_s(App, \"SOluy2T4H4TMrjfHY8dArn+rI94=\", false, function () {\n  return [useQuery];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/Dmolina5/Desktop/glucose-reader-app/glucose-reader-fe/src/App.js"],"names":["React","useEffect","useState","axios","moment","Nav","Graph","useQuery","gql","GET_RANGES_AND_DATA","App","loading","error","rangesAndData"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,WAAP;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,GAAP,MAAgB,kBAAhB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,SACEC,QADF,EAEEC,GAFF,QAGO,gBAHP;;;AAKA,MAAMC,mBAAmB,GAAGD,GAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAfA;;AAiBA,SAASE,GAAT,GAAe;AAAA;;AAEb;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACE;AACA;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACF;AACJ;AAEA,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAAoCN,QAAQ,CAACE,mBAAD,CAAlD;AAEA,MAAIE,OAAJ,EAAa,OAAO,YAAP;AACb,MAAIC,KAAJ,EAAW,OAAQ,GAAEA,KAAM,EAAhB;;AAEX,MAAI,CAACD,OAAL,EAAc;AACZ,wBACE;AAAA,6BACI;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA,gCACE,QAAC,GAAD;AAAK,UAAA,KAAK,EAAEE;AAAZ;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,KAAD;AAAO,UAAA,KAAK,EAAEA;AAAd;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ,qBADF;AAiBD;AACA;;GAnDMH,G;UA2BmCH,Q;;;KA3BnCG,G;AAqDT,eAAeA,GAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport './App.css';\nimport axios from \"axios\";\nimport moment from \"moment\";\nimport Nav from \"./components/Nav\";\nimport Graph from \"./components/Graph\";\nimport {\n  useQuery,\n  gql\n} from \"@apollo/client\";\n\nconst GET_RANGES_AND_DATA = gql`\n  query GetRangesAndData {\n    ranges {\n      low_bound\n      high_bound\n      color\n    }\n    data {\n      result_id\n      result_dt_tm\n      glucose_level\n      glucose_level_unit\n      source\n    }\n  }\n`;\n\nfunction App() {\n\n  // const [glucoseData, setGlucoseData] = useState([])\n  // const [glucoseRanges, setGlucoseRanges] = useState([])\n  // const [selectedDates, setSelectedDates] = useState({\n  //   start: \"\",\n  //   end: \"\"\n  // })\n\n  // Fetch glucose data on app mount, and set initial state\n  // useEffect(()=> {\n    // axios.get(`https://caiken.dev.transformativemed.com/david-skills-test/data.php`)\n    //   .then(res => {\n        // let data = res.data\n        // setGlucoseData(data.glucose_data)\n        // setGlucoseRanges(data.glucose_ranges)\n        // let startDT = data.glucose_data[0].result_dt_tm\n        // let startD = moment(startDT.slice(0, startDT.search(\" \"))).format()\n        // let endDT = data.glucose_data[data.glucose_data.length - 1].result_dt_tm\n        // let endD = moment(endDT.slice(0, endDT.search(\" \"))).format()\n        // setSelectedDates({\n        //   start: startD,\n        //   end: endD\n        // })\n      // })\n  // }, [])\n\n  const { loading, error, rangesAndData } = useQuery(GET_RANGES_AND_DATA);\n\n  if (loading) return 'Loading...';\n  if (error) return `${error}`;\n\n  if (!loading) {\n    return (\n      <>\n          <div className=\"App\">\n            <Nav rAndD={rangesAndData}/>\n            <Graph rAndD={rangesAndData}/>\n          </div>\n        {/* {glucoseData.length ? \n          <div className=\"App\">\n            <Nav selectedDates={selectedDates} setSelectedDates={setSelectedDates} glucoseData={glucoseData}/>\n            <Graph selectedDates={selectedDates} glucoseData={glucoseData} glucoseRanges={glucoseRanges}/>\n          </div>\n        : \n        <h1 id=\"Loading\">\n          Loading...\n        </h1>} */}\n      </>\n    );\n  }\n  }\n\nexport default App;"]},"metadata":{},"sourceType":"module"}