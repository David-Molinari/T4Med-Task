{"ast":null,"code":"export function createData(item, props) {\n  let data = [];\n\n  for (let i = 0; i < props.glucoseRanges.length; i++) {\n    let dataObj = {\n      range: props.glucoseRanges[i].slice(0, 2),\n      data: [],\n      color: props.glucoseRanges[i][2],\n      series: {\n        lines: {\n          show: true,\n          fill: true,\n          fillColor: {\n            colors: [{\n              opacity: 1\n            }, {\n              opacity: 1\n            }]\n          }\n        }\n      }\n    };\n    data.push(dataObj);\n  }\n\n  for (let i0 = 0; i0 < item.result.length; i0++) {\n    for (let i1 = 0; i1 < data.length; i1++) {\n      let gL = item.result[i0].glucose_level;\n\n      if (gL >= data[i1].range[0] && gL <= data[i1].range[1]) {\n        let time = parseInt(item.result[i0].result_dt_tm.slice(11, 13));\n        data[i1].data.push([time, gL]);\n      }\n    }\n  }\n\n  let TandGL = [];\n\n  for (let i = 0; i < data.length; i++) {\n    if (data[i].data.length != undefined) {\n      data[i].data.forEach(arr => {\n        TandGL.push(arr);\n      });\n    }\n  }\n\n  TandGL.sort((a, b) => {\n    return a[0] - b[0];\n  });\n  let thresholds = [];\n\n  for (let i = 0; i < props.glucoseRanges.length; i++) {\n    thresholds.push(props.glucoseRanges[i][0]);\n    thresholds.push(props.glucoseRanges[i][1]);\n  }\n\n  console.log(thresholds, TandGL);\n  let seriesArr = [];\n\n  for (let i0 = 0; i0 < TandGL.length - 1; i0++) {\n    if (TandGL.length > 0 && TandGL[i0][1] < TandGL[i0 + 1][1]) {\n      let thresholdPasses = [];\n\n      for (let i1 = 0; i1 < thresholds.length; i1++) {\n        if (TandGL[i0][1] < thresholds[i1] && TandGL[i0 + 1][1] > thresholds[i1]) {\n          thresholdPasses.push(thresholds[i1]);\n        }\n      }\n\n      let currentSeries = [TandGL[i0]];\n\n      if (seriesArr.length > 0) {\n        let lastSerArrData = seriesArr[seriesArr.length - 1][1];\n        console.log(seriesArr, lastSerArrData[0], TandGL[i0][1]);\n        currentSeries = [lastSerArrData[0], TandGL[i0][1]];\n        seriesArr.push([seriesArr[lastSerArrData], TandGL[i0]]);\n      }\n\n      let totalTimeGap = TandGL[i0 + 1][0] - TandGL[i0][0];\n      let totalPointsGap = TandGL[i0 + 1][1] - TandGL[i0][1];\n\n      for (let i2 = 0; i2 < thresholdPasses.length; i2++) {\n        let pointsDif = thresholdPasses[i2] - TandGL[i0][1];\n        let percOfTot = pointsDif / totalPointsGap;\n        let timeToAdd = percOfTot * totalTimeGap;\n        let time = timeToAdd + TandGL[i0][0];\n        currentSeries.push([time, thresholdPasses[i2]]);\n\n        if (i2 == thresholdPasses.length - 1) {\n          currentSeries.push(TandGL[i0 + 1]);\n        }\n\n        if (currentSeries.length == 2) {\n          seriesArr.push(currentSeries);\n          currentSeries = [];\n        }\n      }\n\n      if (thresholdPasses.length == 0) {\n        currentSeries.push(TandGL[i0 + 1]);\n        seriesArr.push(currentSeries);\n      }\n    } else if (TandGL.length > 0 && TandGL[i0][1] > TandGL[i0 + 1][1]) {\n      let thresholdPasses = [];\n\n      for (let i1 = 0; i1 < thresholds.length; i1++) {\n        if (TandGL[i0 + 1][1] < thresholds[i1] && TandGL[i0][1] > thresholds[i1]) {\n          thresholdPasses.push(thresholds[i1]);\n        }\n      }\n\n      let currentSeries = [TandGL[i0]];\n\n      if (seriesArr.length > 0) {\n        let lastSerArrData = seriesArr[seriesArr.length - 1][1];\n        console.log(lastSerArrData[0], TandGL[i0][1]);\n        currentSeries = [lastSerArrData[0], TandGL[i0][1]];\n        seriesArr.push([seriesArr[lastSerArrData], TandGL[i0]]);\n      }\n\n      thresholdPasses.reverse();\n      let totalTimeGap = TandGL[i0][0] - TandGL[i0 + 1][0];\n      let totalPointsGap = TandGL[i0 + 1][1] - TandGL[i0][1];\n\n      for (let i2 = 0; i2 < thresholdPasses.length; i2++) {\n        let pointsDif = TandGL[i0][1] - thresholdPasses[i2];\n        let percOfTot = pointsDif / totalPointsGap;\n        let timeToAdd = percOfTot * totalTimeGap;\n        let time = timeToAdd + TandGL[i0][0];\n        currentSeries.push([time, thresholdPasses[i2]]);\n\n        if (i2 == thresholdPasses.length - 1) {\n          currentSeries.push(TandGL[i0 + 1]);\n          currentSeries.push(TandGL[i0 + 1]);\n        }\n\n        if (currentSeries.length == 2) {\n          seriesArr.push(currentSeries);\n          currentSeries = [];\n        }\n      }\n\n      if (thresholdPasses.length == 0) {\n        currentSeries.push(TandGL[i0 + 1]);\n        seriesArr.push(currentSeries);\n      }\n    }\n  }\n\n  console.log(seriesArr);\n  let dataToSend = [];\n\n  for (let i0 = 0; i0 < seriesArr.length; i0++) {\n    let color;\n\n    for (let i1 = 0; i1 < props.glucoseRanges; i1++) {\n      if (seriesArr[i0][0][1] > props.glucoseRanges[i1][0] && seriesArr[i0][0][1] < props.glucoseRanges[i1][1]) {\n        color = props.glucoseRanges[i1][2];\n      }\n    }\n\n    dataToSend.push({\n      data: seriesArr[i0],\n      color: color,\n      series: {\n        lines: {\n          lineWidth: 20,\n          show: true,\n          fill: true,\n          fillColor: {\n            colors: [{\n              opacity: 1\n            }, {\n              opacity: 1\n            }]\n          }\n        }\n      }\n    });\n  }\n\n  return dataToSend;\n}","map":{"version":3,"sources":["/Users/Dmolina5/Desktop/T4Med-Task/t4med-task/src/components/Graph/GraphUtils.js"],"names":["createData","item","props","data","i","glucoseRanges","length","dataObj","range","slice","color","series","lines","show","fill","fillColor","colors","opacity","push","i0","result","i1","gL","glucose_level","time","parseInt","result_dt_tm","TandGL","undefined","forEach","arr","sort","a","b","thresholds","console","log","seriesArr","thresholdPasses","currentSeries","lastSerArrData","totalTimeGap","totalPointsGap","i2","pointsDif","percOfTot","timeToAdd","reverse","dataToSend","lineWidth"],"mappings":"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","sourcesContent":["export function createData(item, props) {\n    let data = []\n\n    for (let i = 0; i < props.glucoseRanges.length; i++) {\n        let dataObj = {\n            range: props.glucoseRanges[i].slice(0,2),\n            data: [],\n            color: props.glucoseRanges[i][2],\n            series: {\n                lines: { \n                    show: true, \n                    fill: true, \n                    fillColor: {\n                        colors: [{ opacity: 1 }, { opacity: 1 } ]\n                    }\n                }\n            }\n        }\n        data.push(dataObj)\n    }\n\n    for (let i0 = 0; i0 < item.result.length; i0++) {\n        for (let i1 = 0; i1 < data.length; i1++) {\n            let gL = item.result[i0].glucose_level\n            if (gL >= data[i1].range[0] && gL <= data[i1].range[1]) {\n                let time = parseInt(item.result[i0].result_dt_tm.slice(11,13))\n                data[i1].data.push([time, gL])\n            }\n        }\n    }\n\n    let TandGL = []\n\n    for (let i = 0; i< data.length; i++) {\n        if (data[i].data.length != undefined) {\n            data[i].data.forEach((arr) => {\n                TandGL.push(arr)\n            })\n        }\n    }\n\n    TandGL.sort((a, b) => {\n        return a[0] - b[0]\n    })\n\n    let thresholds = []\n\n    for (let i = 0; i < props.glucoseRanges.length; i++) {\n        thresholds.push(props.glucoseRanges[i][0])\n        thresholds.push(props.glucoseRanges[i][1])\n    }\n\n    console.log(thresholds, TandGL)\n\n    let seriesArr = []\n\n    for (let i0 = 0; i0 < TandGL.length - 1; i0++) {\n        if (TandGL.length > 0 && TandGL[i0][1] < TandGL[i0+1][1]) {\n            let thresholdPasses = []\n            for (let i1 = 0; i1 < thresholds.length; i1++) {\n                if (TandGL[i0][1] < thresholds[i1] && \n                    TandGL[i0+1][1] > thresholds[i1]) {\n                    thresholdPasses.push(thresholds[i1])\n                }\n            }\n            let currentSeries = [TandGL[i0]]\n            if (seriesArr.length > 0) {\n                let lastSerArrData = seriesArr[seriesArr.length-1][1]\n                console.log(seriesArr, lastSerArrData[0], TandGL[i0][1])\n                currentSeries = [lastSerArrData[0], TandGL[i0][1]]\n                seriesArr.push([\n                    seriesArr[lastSerArrData],\n                    TandGL[i0]\n                ])\n            }\n            let totalTimeGap = TandGL[i0+1][0] - TandGL[i0][0]\n            let totalPointsGap = TandGL[i0+1][1] - TandGL[i0][1]\n            for (let i2 = 0; i2 < thresholdPasses.length; i2++) {\n                let pointsDif = thresholdPasses[i2] - TandGL[i0][1]\n                let percOfTot = pointsDif/totalPointsGap\n                let timeToAdd = percOfTot * totalTimeGap \n                let time = timeToAdd + TandGL[i0][0]\n                currentSeries.push([time, thresholdPasses[i2]])\n                if (i2 == thresholdPasses.length - 1 ) {\n                    currentSeries.push(TandGL[i0+1])\n                }\n                if (currentSeries.length == 2) {\n                    seriesArr.push(currentSeries)\n                    currentSeries = []\n                }\n            }\n            if (thresholdPasses.length == 0) {\n                currentSeries.push(TandGL[i0+1])\n                seriesArr.push(currentSeries)\n            }\n        } else if (TandGL.length > 0 && TandGL[i0][1] > TandGL[i0+1][1]) {\n            let thresholdPasses = []\n            for (let i1 = 0; i1 < thresholds.length; i1++) {\n                if (TandGL[i0+1][1] < thresholds[i1] && \n                    TandGL[i0][1] > thresholds[i1]) {\n                    thresholdPasses.push(thresholds[i1])\n                }\n            }\n            let currentSeries = [TandGL[i0]]\n            if (seriesArr.length > 0) {\n                let lastSerArrData = seriesArr[seriesArr.length-1][1]\n                console.log(lastSerArrData[0], TandGL[i0][1])\n                currentSeries = [lastSerArrData[0], TandGL[i0][1]]\n                seriesArr.push([\n                    seriesArr[lastSerArrData],\n                    TandGL[i0]\n                ])\n            }\n            thresholdPasses.reverse()\n            let totalTimeGap = TandGL[i0][0] - TandGL[i0+1][0]\n            let totalPointsGap = TandGL[i0+1][1] - TandGL[i0][1]\n            for (let i2 = 0; i2 < thresholdPasses.length; i2++) {\n                let pointsDif = TandGL[i0][1] - thresholdPasses[i2]\n                let percOfTot = pointsDif/totalPointsGap\n                let timeToAdd = percOfTot * totalTimeGap \n                let time = timeToAdd + TandGL[i0][0]\n                currentSeries.push([time, thresholdPasses[i2]])\n                if (i2 == thresholdPasses.length - 1 ) {\n                    currentSeries.push(TandGL[i0+1])\n                    currentSeries.push(TandGL[i0+1])\n                }\n                if (currentSeries.length == 2) {\n                    seriesArr.push(currentSeries)\n                    currentSeries = []\n                }\n            }\n            if (thresholdPasses.length == 0) {\n                currentSeries.push(TandGL[i0+1])\n                seriesArr.push(currentSeries)\n            }\n        }\n    }\n\n    console.log(seriesArr)\n\n    let dataToSend = []\n\n    for (let i0 = 0; i0 < seriesArr.length; i0++) {\n        let color\n        for (let i1 = 0; i1 < props.glucoseRanges; i1++) {\n            if (seriesArr[i0][0][1] > props.glucoseRanges[i1][0] &&\n                seriesArr[i0][0][1] < props.glucoseRanges[i1][1]) {\n                color = props.glucoseRanges[i1][2]\n            }\n        }\n        dataToSend.push({\n            data: seriesArr[i0],\n            color: color,\n            series: {\n                lines: {\n                    lineWidth: 20,\n                    show: true, \n                    fill: true, \n                    fillColor: {\n                        colors: [{ opacity: 1 }, { opacity: 1 } ]\n                    }\n                }\n            } \n        })\n    }\n\n    return dataToSend\n}"]},"metadata":{},"sourceType":"module"}