{"ast":null,"code":"import $ from \"jquery\";\nexport function createData(item, props, setModal) {\n  let data = [];\n\n  for (let i = 0; i < props.glucoseRanges.length; i++) {\n    let dataObj = {\n      range: props.glucoseRanges[i].slice(0, 2),\n      data: []\n    };\n    data.push(dataObj);\n  }\n\n  for (let i0 = 0; i0 < item.result.length; i0++) {\n    for (let i1 = 0; i1 < data.length; i1++) {\n      let gL = item.result[i0].glucose_level;\n\n      if (gL >= data[i1].range[0] && gL <= data[i1].range[1]) {\n        let hour = parseInt(item.result[i0].result_dt_tm.slice(11, 13));\n        let min = parseInt(item.result[i0].result_dt_tm.slice(14, 16));\n        let minDec = min / 60;\n        let time = hour + minDec;\n        data[i1].data.push([time, gL]);\n      }\n    }\n  }\n\n  let TandGL = [];\n\n  for (let i = 0; i < data.length; i++) {\n    if (data[i].data.length != undefined) {\n      data[i].data.forEach(arr => {\n        TandGL.push(arr);\n      });\n    }\n  }\n\n  TandGL.sort((a, b) => {\n    return a[0] - b[0];\n  });\n  let thresholds = [];\n\n  for (let i = 0; i < props.glucoseRanges.length; i++) {\n    thresholds.push(props.glucoseRanges[i][0]);\n    thresholds.push(props.glucoseRanges[i][1]);\n  }\n\n  let seriesArr = []; // Creating data series\n\n  for (let i0 = 0; i0 < TandGL.length - 1; i0++) {\n    if (TandGL.length > 0 && TandGL[i0][1] < TandGL[i0 + 1][1]) {\n      let thresholdPasses = [];\n\n      for (let i1 = 0; i1 < thresholds.length; i1++) {\n        if (TandGL[i0][1] < thresholds[i1] && TandGL[i0 + 1][1] > thresholds[i1]) {\n          thresholdPasses.push(thresholds[i1]);\n        }\n      }\n\n      if (seriesArr.length > 0) {\n        seriesArr.push([seriesArr[seriesArr.length - 1][1], TandGL[i0]]);\n      }\n\n      let currentSeries = [TandGL[i0]];\n      let totalTimeGap = TandGL[i0 + 1][0] - TandGL[i0][0];\n      let totalPointsGap = TandGL[i0 + 1][1] - TandGL[i0][1];\n\n      for (let i2 = 0; i2 < thresholdPasses.length; i2++) {\n        let pointsDif = thresholdPasses[i2] - TandGL[i0][1];\n        let percOfTot = pointsDif / totalPointsGap;\n        let timeToAdd = percOfTot * totalTimeGap;\n        let time = timeToAdd + TandGL[i0][0];\n        currentSeries.push([time, thresholdPasses[i2]]);\n\n        if (i2 == thresholdPasses.length - 1) {\n          currentSeries.push(TandGL[i0 + 1]);\n        }\n\n        if (currentSeries.length == 2) {\n          seriesArr.push(currentSeries);\n          currentSeries = [];\n        }\n      }\n\n      if (thresholdPasses.length == 0) {\n        currentSeries.push(TandGL[i0 + 1]);\n        seriesArr.push(currentSeries);\n      }\n    } else if (TandGL.length > 0 && TandGL[i0][1] > TandGL[i0 + 1][1]) {\n      let thresholdPasses = [];\n\n      for (let i1 = 0; i1 < thresholds.length; i1++) {\n        if (TandGL[i0 + 1][1] < thresholds[i1] && TandGL[i0][1] > thresholds[i1]) {\n          thresholdPasses.push(thresholds[i1]);\n        }\n      }\n\n      if (seriesArr.length > 0) {\n        seriesArr.push([seriesArr[seriesArr.length - 1][1], TandGL[i0]]);\n      }\n\n      thresholdPasses.reverse();\n      let currentSeries = [TandGL[i0]];\n      let totalTimeGap = TandGL[i0][0] - TandGL[i0 + 1][0];\n      let totalPointsGap = TandGL[i0 + 1][1] - TandGL[i0][1];\n\n      for (let i2 = 0; i2 < thresholdPasses.length; i2++) {\n        let pointsDif = TandGL[i0][1] - thresholdPasses[i2];\n        let percOfTot = pointsDif / totalPointsGap;\n        let timeToAdd = percOfTot * totalTimeGap;\n        let time = timeToAdd + TandGL[i0][0];\n        currentSeries.push([time, thresholdPasses[i2]]);\n\n        if (i2 == thresholdPasses.length - 1) {\n          currentSeries.push(TandGL[i0 + 1]);\n        }\n\n        if (currentSeries.length == 2) {\n          seriesArr.push(currentSeries);\n          currentSeries = [];\n        }\n      }\n\n      if (thresholdPasses.length == 0) {\n        currentSeries.push(TandGL[i0 + 1]);\n        seriesArr.push(currentSeries);\n      }\n    }\n  }\n\n  let dataPreSend = []; // Adding colors\n\n  for (let i0 = 0; i0 < seriesArr.length; i0++) {\n    let avg = (seriesArr[i0][0][1] + seriesArr[i0][1][1]) / 2;\n    let color;\n\n    for (let i1 = 0; i1 < props.glucoseRanges.length; i1++) {\n      if (avg > props.glucoseRanges[i1][0] && avg < props.glucoseRanges[i1][1]) {\n        color = props.glucoseRanges[i1][2];\n        break;\n      }\n    }\n\n    dataPreSend.push({\n      data: seriesArr[i0],\n      color: hexToRgbA(color)\n    });\n  }\n\n  let dataToSend = []; // Adding points\n\n  for (let i0 = 0; i0 < dataPreSend.length; i0++) {\n    let firstT = dataPreSend[i0].data[0][0];\n    let firstGl = dataPreSend[i0].data[0][1];\n    let color = dataPreSend[i0].color;\n    let dataToPush = [];\n    let fAndOrL = \"0\";\n\n    for (let i1 = 0; i1 < TandGL.length; i1++) {\n      let TandGL0 = TandGL[i1][0];\n      let TandGL1 = TandGL[i1][1];\n      console.log(color);\n\n      if (firstT == TandGL0 && firstGl == TandGL1) {\n        dataToPush.push({\n          data: [[firstT, firstGl]],\n          color: color,\n          points: {\n            show: true,\n            fill: true,\n            radius: 7,\n            fillColor: color\n          }\n        });\n        fAndOrL = \"1\";\n      }\n\n      let secondT = dataPreSend[i0].data[1][0];\n      let secondGl = dataPreSend[i0].data[1][1];\n\n      if (secondT == TandGL0 && secondGl == TandGL1) {\n        dataToPush.push({\n          data: [[secondT, secondGl]],\n          color: color,\n          points: {\n            show: true,\n            fill: true,\n            radius: 7,\n            fillColor: color\n          }\n        });\n\n        if (fAndOrL == \"0\") {\n          fAndOrL = \"2\";\n        } else {\n          fAndOrL = \"12\";\n        }\n      }\n    }\n\n    if (fAndOrL == \"0\") {\n      dataToSend.push(dataPreSend[i0]);\n    } else if (fAndOrL == \"1\") {\n      dataToSend.push(dataToPush[0]);\n      dataToSend.push(dataPreSend[i0]);\n    } else if (fAndOrL == \"2\") {\n      dataToSend.push(dataPreSend[i0]);\n      dataToSend.push(dataToPush[0]);\n    } else {\n      dataToSend.push(dataToPush[0]);\n      dataToSend.push(dataPreSend[i0]);\n      dataToSend.push(dataToPush[1]);\n    }\n  } // Closing gaps\n\n\n  for (let i0 = 0; i0 < dataToSend.length - 1; i0++) {\n    let d0 = dataToSend[i0].data;\n    let d1 = dataToSend[i0 + 1].data;\n\n    if (d0.length == 1 && d1.length == 1) {\n      dataToSend.splice(i0, 1);\n    } else {\n      if (d0.length > 1 && d0[1][0] + .01 < d1[0][0]) {\n        for (let i1 = 0; i1 < TandGL.length; i1++) {\n          if (d0[1][0] === TandGL[i1][0] && d0[1][1] === TandGL[i1][1]) {\n            d1[0][0] = d0[1][0];\n          } else if (d1[0][0] === TandGL[i1][0] && d1[0][1] === TandGL[i1][1]) {\n            d0[1][0] = d1[0][0];\n          } else {\n            let num = (d1[0][0] - d0[1][0]) / 2;\n            d0[1][0] = d0[1][0] + num;\n            d1[0][0] = d1[0][0] - num;\n          }\n        }\n      }\n    }\n  }\n\n  let item0 = item;\n  $(`#${item0.date.replaceAll('/', '')}`).off('plotclick').on('plotclick', function (event, pos, item) {\n    event.stopPropagation();\n\n    if (item != null && item.datapoint) {\n      for (let i = 0; i < item0.result.length; i++) {\n        let result = item0.result[i];\n        let gL = result.glucose_level;\n        let hour = parseInt(result.result_dt_tm.slice(11, 13));\n        let min = parseInt(result.result_dt_tm.slice(14, 16));\n        let minDec = min / 60;\n        let time = hour + minDec;\n\n        if (item.datapoint[0] == time && item.datapoint[1] == gL) {\n          setModal({\n            open: true,\n            data: {\n              glucoseLevelNum: gL,\n              glucoseLevel: gL + result.glucose_level_unit,\n              resultDate: result.result_dt_tm,\n              source: result.source,\n              resultId: result.result_id\n            }\n          });\n          break;\n        }\n      }\n    }\n  });\n  return dataToSend;\n}\n\nfunction hexToRgbA(hex) {\n  if (hex != undefined) {\n    var c;\n\n    if (/^#([A-Fa-f0-9]{3}){1,2}$/.test(hex)) {\n      c = hex.substring(1).split('');\n\n      if (c.length == 3) {\n        c = [c[0], c[0], c[1], c[1], c[2], c[2]];\n      }\n\n      c = '0x' + c.join('');\n      return 'rgba(' + [c >> 16 & 255, c >> 8 & 255, c & 255].join(',') + ',.15)';\n    }\n\n    throw new Error('Bad Hex');\n  }\n}","map":{"version":3,"sources":["/Users/Dmolina5/Desktop/T4Med-Task/t4med-task/src/components/Graph/GraphUtils.js"],"names":["$","createData","item","props","setModal","data","i","glucoseRanges","length","dataObj","range","slice","push","i0","result","i1","gL","glucose_level","hour","parseInt","result_dt_tm","min","minDec","time","TandGL","undefined","forEach","arr","sort","a","b","thresholds","seriesArr","thresholdPasses","currentSeries","totalTimeGap","totalPointsGap","i2","pointsDif","percOfTot","timeToAdd","reverse","dataPreSend","avg","color","hexToRgbA","dataToSend","firstT","firstGl","dataToPush","fAndOrL","TandGL0","TandGL1","console","log","points","show","fill","radius","fillColor","secondT","secondGl","d0","d1","splice","num","item0","date","replaceAll","off","on","event","pos","stopPropagation","datapoint","open","glucoseLevelNum","glucoseLevel","glucose_level_unit","resultDate","source","resultId","result_id","hex","c","test","substring","split","join","Error"],"mappings":"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","sourcesContent":["import $ from \"jquery\";\n\nexport function createData(item, props, setModal) {\n    \n    let data = []\n\n    for (let i = 0; i < props.glucoseRanges.length; i++) {\n        let dataObj = {\n            range: props.glucoseRanges[i].slice(0,2),\n            data: []\n        }\n        data.push(dataObj)\n    }\n\n    for (let i0 = 0; i0 < item.result.length; i0++) {\n        for (let i1 = 0; i1 < data.length; i1++) {\n            let gL = item.result[i0].glucose_level\n            if (gL >= data[i1].range[0] && gL <= data[i1].range[1]) {\n                let hour = parseInt(item.result[i0].result_dt_tm.slice(11,13))\n                let min = parseInt(item.result[i0].result_dt_tm.slice(14,16))\n                let minDec = min/60\n                let time = hour + minDec\n                data[i1].data.push([time, gL])\n            }\n        }\n    }\n\n    let TandGL = []\n\n    for (let i = 0; i < data.length; i++) {\n        if (data[i].data.length != undefined) {\n            data[i].data.forEach((arr) => {\n                TandGL.push(arr)\n            })\n        }\n    }\n\n    TandGL.sort((a, b) => {\n        return a[0] - b[0]\n    })\n\n    let thresholds = []\n\n    for (let i = 0; i < props.glucoseRanges.length; i++) {\n        thresholds.push(props.glucoseRanges[i][0])\n        thresholds.push(props.glucoseRanges[i][1])\n    }\n\n    let seriesArr = []\n\n    // Creating data series\n    for (let i0 = 0; i0 < TandGL.length - 1; i0++) {\n        if (TandGL.length > 0 && TandGL[i0][1] < TandGL[i0+1][1]) {\n            let thresholdPasses = []\n            for (let i1 = 0; i1 < thresholds.length; i1++) {\n                if (TandGL[i0][1] < thresholds[i1] && \n                    TandGL[i0+1][1] > thresholds[i1]) {\n                    thresholdPasses.push(thresholds[i1])\n                }\n            }\n            if (seriesArr.length > 0) {\n                seriesArr.push([\n                    seriesArr[seriesArr.length-1][1],\n                    TandGL[i0]\n                ])\n            }\n            let currentSeries = [TandGL[i0]]\n            let totalTimeGap = TandGL[i0+1][0] - TandGL[i0][0]\n            let totalPointsGap = TandGL[i0+1][1] - TandGL[i0][1]\n            for (let i2 = 0; i2 < thresholdPasses.length; i2++) {\n                let pointsDif = thresholdPasses[i2] - TandGL[i0][1]\n                let percOfTot = pointsDif/totalPointsGap\n                let timeToAdd = percOfTot * totalTimeGap \n                let time = timeToAdd + TandGL[i0][0]\n                currentSeries.push([time, thresholdPasses[i2]])\n                if (i2 == thresholdPasses.length - 1 ) {\n                    currentSeries.push(TandGL[i0+1])\n                }\n                if (currentSeries.length == 2) {\n                    seriesArr.push(currentSeries)\n                    currentSeries = []\n                }\n            }\n            if (thresholdPasses.length == 0) {\n                currentSeries.push(TandGL[i0+1])\n                seriesArr.push(currentSeries)\n            }\n        } else if (TandGL.length > 0 && TandGL[i0][1] > TandGL[i0+1][1]) {\n            let thresholdPasses = []\n            for (let i1 = 0; i1 < thresholds.length; i1++) {\n                if (TandGL[i0+1][1] < thresholds[i1] && \n                    TandGL[i0][1] > thresholds[i1]) {\n                    thresholdPasses.push(thresholds[i1])\n                }\n            }\n            if (seriesArr.length > 0) {\n                seriesArr.push([\n                    seriesArr[seriesArr.length-1][1],\n                    TandGL[i0]\n                ])\n            }\n            thresholdPasses.reverse()\n            let currentSeries = [TandGL[i0]]\n            let totalTimeGap = TandGL[i0][0] - TandGL[i0+1][0]\n            let totalPointsGap = TandGL[i0+1][1] - TandGL[i0][1]\n            for (let i2 = 0; i2 < thresholdPasses.length; i2++) {\n                let pointsDif = TandGL[i0][1] - thresholdPasses[i2]\n                let percOfTot = pointsDif/totalPointsGap\n                let timeToAdd = percOfTot * totalTimeGap \n                let time = timeToAdd + TandGL[i0][0]\n                currentSeries.push([time, thresholdPasses[i2]])\n                if (i2 == thresholdPasses.length - 1 ) {\n                    currentSeries.push(TandGL[i0+1])\n                }\n                if (currentSeries.length == 2) {\n                    seriesArr.push(currentSeries)\n                    currentSeries = []\n                }\n            }\n            if (thresholdPasses.length == 0) {\n                currentSeries.push(TandGL[i0+1])\n                seriesArr.push(currentSeries)\n            }\n        }\n    }\n\n    let dataPreSend = []\n\n    // Adding colors\n    for (let i0 = 0; i0 < seriesArr.length; i0++) {\n        let avg = (seriesArr[i0][0][1] + seriesArr[i0][1][1])/2\n        let color\n        for (let i1 = 0; i1 < props.glucoseRanges.length; i1++) {\n            if (avg > props.glucoseRanges[i1][0] &&\n                avg < props.glucoseRanges[i1][1]) {\n                color = props.glucoseRanges[i1][2]\n                break\n            }\n        }\n        dataPreSend.push({\n            data: seriesArr[i0],\n            color: hexToRgbA(color)\n        })\n    }\n\n    let dataToSend = []\n\n    // Adding points\n    for (let i0 = 0; i0 < dataPreSend.length; i0++) {\n        let firstT = dataPreSend[i0].data[0][0]\n        let firstGl = dataPreSend[i0].data[0][1]\n        let color = dataPreSend[i0].color\n        let dataToPush = []\n        let fAndOrL = \"0\"\n        for (let i1 = 0; i1 < TandGL.length; i1++) {\n            let TandGL0 = TandGL[i1][0]\n            let TandGL1 = TandGL[i1][1]\n            console.log(color)\n            if (firstT == TandGL0 && firstGl == TandGL1) {\n                dataToPush.push({\n                    data: [[firstT, firstGl]],\n                    color: color,\n                    points: {\n                        show: true,\n                        fill: true,\n                        radius: 7,\n                        fillColor: color\n                    }\n                })\n                fAndOrL = \"1\"\n            }\n            let secondT = dataPreSend[i0].data[1][0]\n            let secondGl = dataPreSend[i0].data[1][1]\n            if (secondT == TandGL0 && secondGl == TandGL1) {\n                dataToPush.push({\n                    data: [[secondT, secondGl]],\n                    color: color,\n                    points: {\n                        show: true,\n                        fill: true,\n                        radius: 7,\n                        fillColor: color\n                    }\n                })\n                if (fAndOrL == \"0\") {\n                    fAndOrL = \"2\"\n                } else {\n                    fAndOrL = \"12\"\n                }\n            }\n        }\n        if (fAndOrL == \"0\") {\n            dataToSend.push(dataPreSend[i0])\n        } else if (fAndOrL == \"1\") {\n            dataToSend.push(dataToPush[0])\n            dataToSend.push(dataPreSend[i0])\n        } else if (fAndOrL == \"2\") {\n            dataToSend.push(dataPreSend[i0])\n            dataToSend.push(dataToPush[0])\n        } else {\n            dataToSend.push(dataToPush[0])\n            dataToSend.push(dataPreSend[i0])\n            dataToSend.push(dataToPush[1])\n        }\n    }\n\n    // Closing gaps\n    for (let i0 = 0; i0 < dataToSend.length - 1; i0++) {\n        let d0 = dataToSend[i0].data\n        let d1 = dataToSend[i0+1].data\n        if (d0.length == 1 && d1.length == 1) {\n            dataToSend.splice(i0, 1)\n        } else {\n            if (d0.length > 1 && d0[1][0] + .01 < d1[0][0]) {\n                for (let i1 = 0; i1 < TandGL.length; i1++) {\n                    if (d0[1][0] === TandGL[i1][0] && d0[1][1] === TandGL[i1][1]) {\n                        d1[0][0] = d0[1][0]\n                    } else if (d1[0][0] === TandGL[i1][0] && d1[0][1] === TandGL[i1][1]) {\n                        d0[1][0] = d1[0][0]\n                    } else {\n                        let num = ((d1[0][0] - d0[1][0]) / 2)\n                        d0[1][0] = d0[1][0] + num\n                        d1[0][0] = d1[0][0] - num\n                    }\n                }\n            }\n        }\n    }\n\n    let item0 = item\n\n    $(`#${item0.date.replaceAll('/', '')}`).off('plotclick')\n        .on('plotclick', function (event, pos, item) {\n        event.stopPropagation()\n        if (item != null && item.datapoint) {\n            for (let i = 0; i < item0.result.length; i++) {\n                let result = item0.result[i]\n                let gL = result.glucose_level\n                let hour = parseInt(result.result_dt_tm.slice(11,13))\n                let min = parseInt(result.result_dt_tm.slice(14,16))\n                let minDec = min/60\n                let time = hour + minDec\n                if (item.datapoint[0] == time && item.datapoint[1] == gL) {\n                    setModal({\n                        open: true,\n                        data: {\n                            glucoseLevelNum: gL,\n                            glucoseLevel: gL + result.glucose_level_unit,\n                            resultDate: result.result_dt_tm,\n                            source: result.source,\n                            resultId: result.result_id\n                        }\n                    })\n                    break\n                }\n            }\n        }\n    });\n\n    return dataToSend\n}\n\nfunction hexToRgbA(hex){\n    if (hex != undefined) {\n        var c;\n        if(/^#([A-Fa-f0-9]{3}){1,2}$/.test(hex)){\n            c= hex.substring(1).split('');\n            if(c.length== 3){\n                c= [c[0], c[0], c[1], c[1], c[2], c[2]];\n            }\n            c= '0x'+c.join('');\n            return 'rgba('+[(c>>16)&255, (c>>8)&255, c&255].join(',')+',.15)';\n        }\n        throw new Error('Bad Hex');\n    }\n}"]},"metadata":{},"sourceType":"module"}