{"ast":null,"code":"import $ from \"jquery\";\nexport function createData(item, props, setModal) {\n  let data = [];\n\n  for (let i = 0; i < props.glucoseRanges.length; i++) {\n    let dataObj = {\n      range: props.glucoseRanges[i].slice(0, 2),\n      data: [],\n      color: props.glucoseRanges[i][2],\n      series: {\n        lines: {\n          show: true,\n          fill: true,\n          fillColor: {\n            colors: [{\n              opacity: 1\n            }, {\n              opacity: 1\n            }]\n          }\n        }\n      }\n    };\n    data.push(dataObj);\n  }\n\n  for (let i0 = 0; i0 < item.result.length; i0++) {\n    for (let i1 = 0; i1 < data.length; i1++) {\n      let gL = item.result[i0].glucose_level;\n\n      if (gL >= data[i1].range[0] && gL <= data[i1].range[1]) {\n        let hour = parseInt(item.result[i0].result_dt_tm.slice(11, 13));\n        let min = parseInt(item.result[i0].result_dt_tm.slice(14, 16));\n        let minDec = min / 60;\n        let time = hour + minDec;\n        data[i1].data.push([time, gL]);\n      }\n    }\n  }\n\n  let TandGL = [];\n\n  for (let i = 0; i < data.length; i++) {\n    if (data[i].data.length != undefined) {\n      data[i].data.forEach(arr => {\n        TandGL.push(arr);\n      });\n    }\n  }\n\n  TandGL.sort((a, b) => {\n    return a[0] - b[0];\n  });\n  let thresholds = [];\n\n  for (let i = 0; i < props.glucoseRanges.length; i++) {\n    thresholds.push(props.glucoseRanges[i][0]);\n    thresholds.push(props.glucoseRanges[i][1]);\n  }\n\n  let seriesArr = [];\n\n  for (let i0 = 0; i0 < TandGL.length - 1; i0++) {\n    if (TandGL.length > 0 && TandGL[i0][1] < TandGL[i0 + 1][1]) {\n      let thresholdPasses = [];\n\n      for (let i1 = 0; i1 < thresholds.length; i1++) {\n        if (TandGL[i0][1] < thresholds[i1] && TandGL[i0 + 1][1] > thresholds[i1]) {\n          thresholdPasses.push(thresholds[i1]);\n        }\n      }\n\n      if (seriesArr.length > 0) {\n        seriesArr.push([seriesArr[seriesArr.length - 1][1], TandGL[i0]]);\n      }\n\n      let currentSeries = [TandGL[i0]];\n      let totalTimeGap = TandGL[i0 + 1][0] - TandGL[i0][0];\n      let totalPointsGap = TandGL[i0 + 1][1] - TandGL[i0][1];\n\n      for (let i2 = 0; i2 < thresholdPasses.length; i2++) {\n        let pointsDif = thresholdPasses[i2] - TandGL[i0][1];\n        let percOfTot = pointsDif / totalPointsGap;\n        let timeToAdd = percOfTot * totalTimeGap;\n        let time = timeToAdd + TandGL[i0][0];\n        currentSeries.push([time, thresholdPasses[i2]]);\n\n        if (i2 == thresholdPasses.length - 1) {\n          currentSeries.push(TandGL[i0 + 1]);\n        }\n\n        if (currentSeries.length == 2) {\n          seriesArr.push(currentSeries);\n          currentSeries = [];\n        }\n      }\n\n      if (thresholdPasses.length == 0) {\n        currentSeries.push(TandGL[i0 + 1]);\n        seriesArr.push(currentSeries);\n      }\n    } else if (TandGL.length > 0 && TandGL[i0][1] > TandGL[i0 + 1][1]) {\n      let thresholdPasses = [];\n\n      for (let i1 = 0; i1 < thresholds.length; i1++) {\n        if (TandGL[i0 + 1][1] < thresholds[i1] && TandGL[i0][1] > thresholds[i1]) {\n          thresholdPasses.push(thresholds[i1]);\n        }\n      }\n\n      if (seriesArr.length > 0) {\n        seriesArr.push([seriesArr[seriesArr.length - 1][1], TandGL[i0]]);\n      }\n\n      thresholdPasses.reverse();\n      console.log(thresholdPasses);\n      let currentSeries = [TandGL[i0]];\n      let totalTimeGap = TandGL[i0][0] - TandGL[i0 + 1][0];\n      let totalPointsGap = TandGL[i0 + 1][1] - TandGL[i0][1];\n\n      for (let i2 = 0; i2 < thresholdPasses.length; i2++) {\n        let pointsDif = TandGL[i0][1] - thresholdPasses[i2];\n        let percOfTot = pointsDif / totalPointsGap;\n        let timeToAdd = percOfTot * totalTimeGap;\n        let time = timeToAdd + TandGL[i0][0];\n        currentSeries.push([time, thresholdPasses[i2]]);\n\n        if (i2 == thresholdPasses.length - 1) {\n          currentSeries.push(TandGL[i0 + 1]);\n        }\n\n        if (currentSeries.length == 2) {\n          seriesArr.push(currentSeries);\n          currentSeries = [];\n        }\n      }\n\n      if (thresholdPasses.length == 0) {\n        currentSeries.push(TandGL[i0 + 1]);\n        seriesArr.push(currentSeries);\n      }\n    }\n  }\n\n  for (let i = 0; i < seriesArr.length; i++) {\n    if (seriesArr[i][0] === seriesArr[i][1]) {\n      seriesArr.splice(i, 1);\n    }\n  }\n\n  let dataToSend = [];\n\n  for (let i0 = 0; i0 < seriesArr.length; i0++) {\n    let avg = (seriesArr[i0][0][1] + seriesArr[i0][1][1]) / 2;\n    let color;\n\n    for (let i1 = 0; i1 < props.glucoseRanges.length; i1++) {\n      if (avg > props.glucoseRanges[i1][0] && avg < props.glucoseRanges[i1][1]) {\n        color = props.glucoseRanges[i1][2];\n        break;\n      }\n    }\n\n    dataToSend.push({\n      data: seriesArr[i0],\n      color: color\n    });\n  } // let dataToSend = []\n  // for (let i0 = 0; i0 < dataPreSend.length; i0++) {\n  //     let firstT = dataPreSend[i0].data[0][0]\n  //     let firstGl = dataPreSend[i0].data[0][1]\n  //     let color = dataPreSend[i0].color\n  //     let dataToPush = []\n  //     let fAndOrL = \"0\"\n  //     for (let i1 = 0; i1 < TandGL.length; i1++) {\n  //         let TandGL0 = TandGL[i1][0]\n  //         let TandGL1 = TandGL[i1][1]\n  //         if (firstT == TandGL0 && firstGl == TandGL1) {\n  //             dataToPush.push({\n  //                 data: [[firstT, firstGl]],\n  //                 color: color,\n  //                 points: {show: true, radius: 7}\n  //             })\n  //             fAndOrL = \"1\"\n  //         }\n  //         let secondT = dataPreSend[i0].data[1][0]\n  //         let secondGl = dataPreSend[i0].data[1][1]\n  //         if (secondT == TandGL0 && secondGl == TandGL1) {\n  //             dataToPush.push({\n  //                 data: [[secondT, secondGl]],\n  //                 color: color,\n  //                 points: {show: true, radius: 7}\n  //             })\n  //             if (fAndOrL == \"0\") {\n  //                 fAndOrL = \"2\"\n  //             } else {\n  //                 fAndOrL = \"12\"\n  //             }\n  //         }\n  //     }\n  //     if (fAndOrL == \"0\") {\n  //         dataToSend.push(dataPreSend[i0])\n  //     } else if (fAndOrL == \"1\") {\n  //         dataToSend.push(dataToPush[0])\n  //         dataToSend.push(dataPreSend[i0])\n  //     } else if (fAndOrL == \"2\") {\n  //         dataToSend.push(dataPreSend[i0])\n  //         dataToSend.push(dataToPush[0])\n  //     } else {\n  //         dataToSend.push(dataToPush[0])\n  //         dataToSend.push(dataPreSend[i0])\n  //         dataToSend.push(dataToPush[1])\n  //     }\n  // }\n\n\n  for (let i0 = 0; i0 < dataToSend.length - 1; i0++) {\n    let d0 = dataToSend[i0].data;\n    let d1 = dataToSend[i0 + 1].data;\n\n    if (d0.length == 1 && d1.length == 1) {\n      dataToSend.splice(i0, 1);\n    } else {\n      if (d0.length > 1 && d0[1][0] + .01 < d1[0][0]) {\n        for (let i1 = 0; i1 < TandGL.length; i1++) {\n          if (d0[1][0] === TandGL[i1][0] && d0[1][1] === TandGL[i1][1]) {\n            d1[0][0] = d0[1][0];\n          } else if (d1[0][0] === TandGL[i1][0] && d1[0][1] === TandGL[i1][1]) {\n            d0[1][0] = d1[0][0];\n          } else {\n            let num = (d1[0][0] - d0[1][0]) / 2;\n            d0[1][0] = d0[1][0] + num;\n            d1[0][0] = d1[0][0] - num;\n          }\n        }\n      }\n    }\n  }\n\n  let item0 = item;\n  $(`#${item0.date.replaceAll('/', '')}`).off('plotclick').on('plotclick', function (event, pos, item) {\n    event.stopPropagation();\n\n    if (item != null && item.datapoint) {\n      for (let i = 0; i < item0.result.length; i++) {\n        let result = item0.result[i];\n        let gL = result.glucose_level;\n        let hour = parseInt(result.result_dt_tm.slice(11, 13));\n        let min = parseInt(result.result_dt_tm.slice(14, 16));\n        let minDec = min / 60;\n        let time = hour + minDec;\n\n        if (item.datapoint[0] == time && item.datapoint[1] == gL) {\n          setModal({\n            open: true,\n            data: {\n              glucoseLevelNum: gL,\n              glucoseLevel: gL + result.glucose_level_unit,\n              resultDate: result.result_dt_tm,\n              source: result.source,\n              resultId: result.result_id\n            }\n          });\n          break;\n        }\n      }\n    }\n  });\n  return dataToSend;\n}","map":{"version":3,"sources":["/Users/Dmolina5/Desktop/T4Med-Task/t4med-task/src/components/Graph/GraphUtils.js"],"names":["$","createData","item","props","setModal","data","i","glucoseRanges","length","dataObj","range","slice","color","series","lines","show","fill","fillColor","colors","opacity","push","i0","result","i1","gL","glucose_level","hour","parseInt","result_dt_tm","min","minDec","time","TandGL","undefined","forEach","arr","sort","a","b","thresholds","seriesArr","thresholdPasses","currentSeries","totalTimeGap","totalPointsGap","i2","pointsDif","percOfTot","timeToAdd","reverse","console","log","splice","dataToSend","avg","d0","d1","num","item0","date","replaceAll","off","on","event","pos","stopPropagation","datapoint","open","glucoseLevelNum","glucoseLevel","glucose_level_unit","resultDate","source","resultId","result_id"],"mappings":"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","sourcesContent":["import $ from \"jquery\";\n\nexport function createData(item, props, setModal) {\n    let data = []\n\n    for (let i = 0; i < props.glucoseRanges.length; i++) {\n        let dataObj = {\n            range: props.glucoseRanges[i].slice(0,2),\n            data: [],\n            color: props.glucoseRanges[i][2],\n            series: {\n                lines: { \n                    show: true, \n                    fill: true, \n                    fillColor: {\n                        colors: [{ opacity: 1 }, { opacity: 1 } ]\n                    }\n                }\n            }\n        }\n        data.push(dataObj)\n    }\n\n    for (let i0 = 0; i0 < item.result.length; i0++) {\n        for (let i1 = 0; i1 < data.length; i1++) {\n            let gL = item.result[i0].glucose_level\n            if (gL >= data[i1].range[0] && gL <= data[i1].range[1]) {\n                let hour = parseInt(item.result[i0].result_dt_tm.slice(11,13))\n                let min = parseInt(item.result[i0].result_dt_tm.slice(14,16))\n                let minDec = min/60\n                let time = hour + minDec\n                data[i1].data.push([time, gL])\n            }\n        }\n    }\n\n    let TandGL = []\n\n    for (let i = 0; i< data.length; i++) {\n        if (data[i].data.length != undefined) {\n            data[i].data.forEach((arr) => {\n                TandGL.push(arr)\n            })\n        }\n    }\n\n    TandGL.sort((a, b) => {\n        return a[0] - b[0]\n    })\n\n    let thresholds = []\n\n    for (let i = 0; i < props.glucoseRanges.length; i++) {\n        thresholds.push(props.glucoseRanges[i][0])\n        thresholds.push(props.glucoseRanges[i][1])\n    }\n\n    let seriesArr = []\n\n    for (let i0 = 0; i0 < TandGL.length - 1; i0++) {\n        if (TandGL.length > 0 && TandGL[i0][1] < TandGL[i0+1][1]) {\n            let thresholdPasses = []\n            for (let i1 = 0; i1 < thresholds.length; i1++) {\n                if (TandGL[i0][1] < thresholds[i1] && \n                    TandGL[i0+1][1] > thresholds[i1]) {\n                    thresholdPasses.push(thresholds[i1])\n                }\n            }\n            if (seriesArr.length > 0) {\n                seriesArr.push([\n                    seriesArr[seriesArr.length-1][1],\n                    TandGL[i0]\n                ])\n            }\n            let currentSeries = [TandGL[i0]]\n            let totalTimeGap = TandGL[i0+1][0] - TandGL[i0][0]\n            let totalPointsGap = TandGL[i0+1][1] - TandGL[i0][1]\n            for (let i2 = 0; i2 < thresholdPasses.length; i2++) {\n                let pointsDif = thresholdPasses[i2] - TandGL[i0][1]\n                let percOfTot = pointsDif/totalPointsGap\n                let timeToAdd = percOfTot * totalTimeGap \n                let time = timeToAdd + TandGL[i0][0]\n                currentSeries.push([time, thresholdPasses[i2]])\n                if (i2 == thresholdPasses.length - 1 ) {\n                    currentSeries.push(TandGL[i0+1])\n                }\n                if (currentSeries.length == 2) {\n                    seriesArr.push(currentSeries)\n                    currentSeries = []\n                }\n            }\n            if (thresholdPasses.length == 0) {\n                currentSeries.push(TandGL[i0+1])\n                seriesArr.push(currentSeries)\n            }\n        } else if (TandGL.length > 0 && TandGL[i0][1] > TandGL[i0+1][1]) {\n            let thresholdPasses = []\n            for (let i1 = 0; i1 < thresholds.length; i1++) {\n                if (TandGL[i0+1][1] < thresholds[i1] && \n                    TandGL[i0][1] > thresholds[i1]) {\n                    thresholdPasses.push(thresholds[i1])\n                }\n            }\n            if (seriesArr.length > 0) {\n                seriesArr.push([\n                    seriesArr[seriesArr.length-1][1],\n                    TandGL[i0]\n                ])\n            }\n            thresholdPasses.reverse()\n            console.log(thresholdPasses)\n            let currentSeries = [TandGL[i0]]\n            let totalTimeGap = TandGL[i0][0] - TandGL[i0+1][0]\n            let totalPointsGap = TandGL[i0+1][1] - TandGL[i0][1]\n            for (let i2 = 0; i2 < thresholdPasses.length; i2++) {\n                let pointsDif = TandGL[i0][1] - thresholdPasses[i2]\n                let percOfTot = pointsDif/totalPointsGap\n                let timeToAdd = percOfTot * totalTimeGap \n                let time = timeToAdd + TandGL[i0][0]\n                currentSeries.push([time, thresholdPasses[i2]])\n                if (i2 == thresholdPasses.length - 1 ) {\n                    currentSeries.push(TandGL[i0+1])\n                }\n                if (currentSeries.length == 2) {\n                    seriesArr.push(currentSeries)\n                    currentSeries = []\n                }\n            }\n            if (thresholdPasses.length == 0) {\n                currentSeries.push(TandGL[i0+1])\n                seriesArr.push(currentSeries)\n            }\n        }\n    }\n\n    for (let i = 0; i < seriesArr.length; i++) {\n        if (seriesArr[i][0] === seriesArr[i][1]) {\n            seriesArr.splice(i, 1)\n        }\n    }\n\n    let dataToSend = []\n\n    for (let i0 = 0; i0 < seriesArr.length; i0++) {\n        let avg = (seriesArr[i0][0][1] + seriesArr[i0][1][1])/2\n        let color\n        for (let i1 = 0; i1 < props.glucoseRanges.length; i1++) {\n            if (avg > props.glucoseRanges[i1][0] &&\n                avg < props.glucoseRanges[i1][1]) {\n                color = props.glucoseRanges[i1][2]\n                break\n            }\n        }\n        dataToSend.push({\n            data: seriesArr[i0],\n            color: color\n        })\n    }\n\n    // let dataToSend = []\n\n    // for (let i0 = 0; i0 < dataPreSend.length; i0++) {\n    //     let firstT = dataPreSend[i0].data[0][0]\n    //     let firstGl = dataPreSend[i0].data[0][1]\n    //     let color = dataPreSend[i0].color\n    //     let dataToPush = []\n    //     let fAndOrL = \"0\"\n    //     for (let i1 = 0; i1 < TandGL.length; i1++) {\n    //         let TandGL0 = TandGL[i1][0]\n    //         let TandGL1 = TandGL[i1][1]\n    //         if (firstT == TandGL0 && firstGl == TandGL1) {\n    //             dataToPush.push({\n    //                 data: [[firstT, firstGl]],\n    //                 color: color,\n    //                 points: {show: true, radius: 7}\n    //             })\n    //             fAndOrL = \"1\"\n    //         }\n    //         let secondT = dataPreSend[i0].data[1][0]\n    //         let secondGl = dataPreSend[i0].data[1][1]\n    //         if (secondT == TandGL0 && secondGl == TandGL1) {\n    //             dataToPush.push({\n    //                 data: [[secondT, secondGl]],\n    //                 color: color,\n    //                 points: {show: true, radius: 7}\n    //             })\n    //             if (fAndOrL == \"0\") {\n    //                 fAndOrL = \"2\"\n    //             } else {\n    //                 fAndOrL = \"12\"\n    //             }\n    //         }\n    //     }\n    //     if (fAndOrL == \"0\") {\n    //         dataToSend.push(dataPreSend[i0])\n    //     } else if (fAndOrL == \"1\") {\n    //         dataToSend.push(dataToPush[0])\n    //         dataToSend.push(dataPreSend[i0])\n    //     } else if (fAndOrL == \"2\") {\n    //         dataToSend.push(dataPreSend[i0])\n    //         dataToSend.push(dataToPush[0])\n    //     } else {\n    //         dataToSend.push(dataToPush[0])\n    //         dataToSend.push(dataPreSend[i0])\n    //         dataToSend.push(dataToPush[1])\n    //     }\n    // }\n\n    for (let i0 = 0; i0 < dataToSend.length - 1; i0++) {\n        let d0 = dataToSend[i0].data\n        let d1 = dataToSend[i0+1].data\n        if (d0.length == 1 && d1.length == 1) {\n            dataToSend.splice(i0, 1)\n        } else {\n            if (d0.length > 1 && d0[1][0] + .01 < d1[0][0]) {\n                for (let i1 = 0; i1 < TandGL.length; i1++) {\n                    if (d0[1][0] === TandGL[i1][0] && d0[1][1] === TandGL[i1][1]) {\n                        d1[0][0] = d0[1][0]\n                    } else if (d1[0][0] === TandGL[i1][0] && d1[0][1] === TandGL[i1][1]) {\n                        d0[1][0] = d1[0][0]\n                    } else {\n                        let num = ((d1[0][0] - d0[1][0]) / 2)\n                        d0[1][0] = d0[1][0] + num\n                        d1[0][0] = d1[0][0] - num\n                    }\n                }\n            }\n        }\n    }\n\n    let item0 = item\n\n    $(`#${item0.date.replaceAll('/', '')}`).off('plotclick')\n        .on('plotclick', function (event, pos, item) {\n        event.stopPropagation()\n        if (item != null && item.datapoint) {\n            for (let i = 0; i < item0.result.length; i++) {\n                let result = item0.result[i]\n                let gL = result.glucose_level\n                let hour = parseInt(result.result_dt_tm.slice(11,13))\n                let min = parseInt(result.result_dt_tm.slice(14,16))\n                let minDec = min/60\n                let time = hour + minDec\n                if (item.datapoint[0] == time && item.datapoint[1] == gL) {\n                    setModal({\n                        open: true,\n                        data: {\n                            glucoseLevelNum: gL,\n                            glucoseLevel: gL + result.glucose_level_unit,\n                            resultDate: result.result_dt_tm,\n                            source: result.source,\n                            resultId: result.result_id\n                        }\n                    })\n                    break\n                }\n            }\n        }\n    });\n\n    return dataToSend\n}"]},"metadata":{},"sourceType":"module"}