{"ast":null,"code":"var _jsxFileName = \"/Users/Dmolina5/Desktop/T4Med-Task/t4med-task/src/components/Graph/index.js\";\nimport React, { useEffect } from \"react\";\nimport './Graph.css';\nimport '../../jquery-loader';\nimport ReactFlot from 'react-flot';\nimport '../../../node_modules/react-flot/flot/jquery.flot.time.min';\nimport moment from 'moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Graph(props) {\n  let glucoseDBD = {};\n\n  for (let i = 0; i < props.glucoseData.length; i++) {\n    let reading = props.glucoseData[i];\n    let dT = reading.result_dt_tm;\n    let day = dT.slice(0, 10);\n\n    if (glucoseDBD[day] == undefined) {\n      glucoseDBD[day] = [reading];\n    } else {\n      glucoseDBD[day].push(reading);\n    }\n  }\n\n  let glucoseDBDArr = [];\n\n  for (let i = 0; i < Object.keys(glucoseDBD).length; i++) {\n    let date = Object.keys(glucoseDBD)[i];\n    glucoseDBDArr.push({\n      date: date,\n      result: glucoseDBD[date]\n    });\n  } // function createData(date) {\n  //     let data = []\n  //     for (let i = 0; i < props.glucoseRanges.length; i++) {\n  //         let dataObj = {\n  //             data: [],\n  //             color: props.glucoseRanges[i][2],\n  //             series: {\n  //                 lines: { \n  //                     show: true, \n  //                     fill: true, \n  //                     fillColor: {\n  //                         colors: [{ opacity: 1 }, { opacity: 1 } ]\n  //                     }\n  //                 }\n  //             }\n  //         }\n  //         data.push(dataObj)\n  //     }\n  //     for (let i = 0; i < props.glucoseData; i++) {\n  //     }\n  //     return (\n  //     )\n  // }\n\n\n  let ticks = [[0, \"00:00\"]];\n\n  for (let i = 2; i < 25; i = i + 2) {\n    if (i < 10) {\n      ticks.push([i, `0${i}:00`]);\n    } else {\n      ticks.push([i, `${i}:00`]);\n    }\n  }\n\n  const options = {\n    xaxis: {\n      min: 0,\n      max: 24,\n      mode: \"time\",\n      timeformat: \"%H:%M\",\n      ticks: ticks\n    },\n    yaxis: {\n      min: 0,\n      max: 350,\n      ticks: [100, 180]\n    },\n    series: {\n      lines: {\n        show: true\n      },\n      points: {\n        show: true\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: props.selectedDates.start.length == 0 ? glucoseDBDArr.map(item => {\n      let momentD = item.date;\n      let momentS = moment(props.selectedDates.start).format('L');\n      let momentE = moment(props.selectedDates.end).format('L');\n      console.log(momentD >= momentS && momentD <= momentE);\n\n      if (momentD >= momentS && momentD <= momentE) {\n        /*#__PURE__*/\n        _jsxDEV(ReactFlot, {\n          id: \"product-chart\",\n          data: [[0, 5]],\n          options: options,\n          width: \"100%\",\n          height: \"250px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 25\n        }, this);\n      }\n    }) : \" \"\n  }, void 0, false);\n}\n\n_c = Graph;\nexport default Graph;\n\nvar _c;\n\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"sources":["/Users/Dmolina5/Desktop/T4Med-Task/t4med-task/src/components/Graph/index.js"],"names":["React","useEffect","ReactFlot","moment","Graph","props","glucoseDBD","i","glucoseData","length","reading","dT","result_dt_tm","day","slice","undefined","push","glucoseDBDArr","Object","keys","date","result","ticks","options","xaxis","min","max","mode","timeformat","yaxis","series","lines","show","points","selectedDates","start","map","item","momentD","momentS","format","momentE","end","console","log"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport './Graph.css';\nimport '../../jquery-loader';\nimport ReactFlot from 'react-flot';\nimport '../../../node_modules/react-flot/flot/jquery.flot.time.min';\nimport moment from 'moment';\n\nfunction Graph(props) {\n\n    let glucoseDBD = {}\n\n    for (let i = 0; i < props.glucoseData.length; i++) {\n        let reading = props.glucoseData[i]\n        let dT = reading.result_dt_tm\n        let day = dT.slice(0,10)\n        if (glucoseDBD[day] == undefined) {\n            glucoseDBD[day] = [reading]\n        } else {\n            glucoseDBD[day].push(reading)\n        }\n    }\n\n    let glucoseDBDArr = []\n\n    for (let i = 0; i < Object.keys(glucoseDBD).length; i++) {\n        let date = Object.keys(glucoseDBD)[i]\n        glucoseDBDArr.push({\n            date: date,\n            result: glucoseDBD[date]\n        })\n    }\n\n    // function createData(date) {\n    //     let data = []\n\n    //     for (let i = 0; i < props.glucoseRanges.length; i++) {\n    //         let dataObj = {\n    //             data: [],\n    //             color: props.glucoseRanges[i][2],\n    //             series: {\n    //                 lines: { \n    //                     show: true, \n    //                     fill: true, \n    //                     fillColor: {\n    //                         colors: [{ opacity: 1 }, { opacity: 1 } ]\n    //                     }\n    //                 }\n    //             }\n    //         }\n    //         data.push(dataObj)\n    //     }\n\n    //     for (let i = 0; i < props.glucoseData; i++) {\n\n    //     }\n\n\n    //     return (\n\n    //     )\n    // }\n\n    let ticks = [[0,\"00:00\"]]\n\n    for (let i = 2; i < 25; i = i + 2) {\n        if (i < 10) {\n            ticks.push([i, `0${i}:00`])\n        } else {\n            ticks.push([i, `${i}:00`]) \n        }\n    }\n\n    const options = {\n        xaxis: {\n            min: 0, \n            max: 24, \n            mode: \"time\", \n            timeformat: \"%H:%M\",\n            ticks: ticks\n        }, \n        yaxis: {\n            min: 0, \n            max: 350,\n            ticks: [100, 180]\n        },\n        series: {\n            lines: { show: true },\n            points: { show: true }\n        }\n    }\n\n    return (\n        <>\n            {\n            props.selectedDates.start.length == 0 ?\n                glucoseDBDArr.map((item) => {\n                    let momentD = item.date\n                    let momentS = moment(props.selectedDates.start).format('L')\n                    let momentE = moment(props.selectedDates.end).format('L')\n                    console.log(momentD >= momentS && momentD <= momentE)\n                    if (momentD >= momentS && momentD <= momentE) {\n                        <ReactFlot id=\"product-chart\" data={[[0,5]]} options={options} width=\"100%\" height=\"250px\" />\n\n                    }\n                })\n            : \" \"\n            }\n        </>\n      );\n\n}\n\nexport default Graph;"]},"metadata":{},"sourceType":"module"}