{"ast":null,"code":"var _jsxFileName = \"/Users/Dmolina5/Desktop/glucose-reader-app/glucose-reader-fe/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport './App.css';\nimport axios from \"axios\";\nimport moment from \"moment\";\nimport Nav from \"./components/Nav\";\nimport Graph from \"./components/Graph\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst GET_RANGES_AND_DATA = gql`\n  query GetRangesAndData {\n    ranges {\n      low_bound\n      high_bound\n      color\n    }\n    data {\n      result_id\n      result_dt_tm\n      glucose_level\n      glucose_level_unit\n      source\n    }\n  }\n`;\n\nfunction App() {\n  _s();\n\n  const [glucoseData, setGlucoseData] = useState([]);\n  const [glucoseRanges, setGlucoseRanges] = useState([]);\n  const [selectedDates, setSelectedDates] = useState({\n    start: \"\",\n    end: \"\"\n  });\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_RANGES_AND_DATA); // Fetch glucose data on app mount, and set initial state\n  // useEffect(()=> {\n  //   if(loading==false) {\n  //     console.log(data)\n  //   }\n  // axios.get(`https://caiken.dev.transformativemed.com/david-skills-test/data.php`)\n  //   .then(res => {\n  // let data = res.data\n  // setGlucoseData(data.glucose_data)\n  // setGlucoseRanges(data.glucose_ranges)\n  // let startDT = data.glucose_data[0].result_dt_tm\n  // let startD = moment(startDT.slice(0, startDT.search(\" \"))).format()\n  // let endDT = data.glucose_data[data.glucose_data.length - 1].result_dt_tm\n  // let endD = moment(endDT.slice(0, endDT.search(\" \"))).format()\n  // setSelectedDates({\n  //   start: startD,\n  //   end: endD\n  // })\n  // })\n  // }, [data])\n\n  console.log(data);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"h1\", {\n    id: \"Loading\",\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n  if (error) return `${error}`;\n  setGlucoseData(data.data);\n  setGlucoseRanges(data.ranges);\n  let startDT = data.data[0].result_dt_tm;\n  let startD = moment(startDT.slice(0, startDT.search(\" \"))).format();\n  let endDT = data.data[data.data.length - 1].result_dt_tm;\n  let endD = moment(endDT.slice(0, endDT.search(\" \"))).format();\n  setSelectedDates({\n    start: startD,\n    end: endD\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: glucoseData.length ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Nav, {\n        selectedDates: selectedDates,\n        setSelectedDates: setSelectedDates,\n        glucoseData: glucoseData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Graph, {\n        selectedDates: selectedDates,\n        glucoseData: glucoseData,\n        glucoseRanges: glucoseRanges\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n      id: \"Loading\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(App, \"w5VLHKh+jQn3bwNy2K2CU31H6xA=\", false, function () {\n  return [useQuery];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/Dmolina5/Desktop/glucose-reader-app/glucose-reader-fe/src/App.js"],"names":["React","useEffect","useState","axios","moment","Nav","Graph","useQuery","gql","GET_RANGES_AND_DATA","App","glucoseData","setGlucoseData","glucoseRanges","setGlucoseRanges","selectedDates","setSelectedDates","start","end","loading","error","data","console","log","ranges","startDT","result_dt_tm","startD","slice","search","format","endDT","length","endD"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport './App.css';\nimport axios from \"axios\";\nimport moment from \"moment\";\nimport Nav from \"./components/Nav\";\nimport Graph from \"./components/Graph\";\nimport {\n  useQuery,\n  gql\n} from \"@apollo/client\";\n\nconst GET_RANGES_AND_DATA = gql`\n  query GetRangesAndData {\n    ranges {\n      low_bound\n      high_bound\n      color\n    }\n    data {\n      result_id\n      result_dt_tm\n      glucose_level\n      glucose_level_unit\n      source\n    }\n  }\n`;\n\nfunction App() {\n\n  const [glucoseData, setGlucoseData] = useState([])\n  const [glucoseRanges, setGlucoseRanges] = useState([])\n  const [selectedDates, setSelectedDates] = useState({\n    start: \"\",\n    end: \"\"\n  })\n\n  const { loading, error, data } = useQuery(GET_RANGES_AND_DATA);\n\n  // Fetch glucose data on app mount, and set initial state\n  // useEffect(()=> {\n  //   if(loading==false) {\n  //     console.log(data)\n  //   }\n    // axios.get(`https://caiken.dev.transformativemed.com/david-skills-test/data.php`)\n    //   .then(res => {\n        // let data = res.data\n        // setGlucoseData(data.glucose_data)\n        // setGlucoseRanges(data.glucose_ranges)\n        // let startDT = data.glucose_data[0].result_dt_tm\n        // let startD = moment(startDT.slice(0, startDT.search(\" \"))).format()\n        // let endDT = data.glucose_data[data.glucose_data.length - 1].result_dt_tm\n        // let endD = moment(endDT.slice(0, endDT.search(\" \"))).format()\n        // setSelectedDates({\n        //   start: startD,\n        //   end: endD\n        // })\n      // })\n  // }, [data])\n\n  console.log(data)\n\n  if (loading) return (\n    <h1 id=\"Loading\">\n        Loading...\n    </h1>\n  );\n\n  if (error) return `${error}`;\n\n  setGlucoseData(data.data)\n  setGlucoseRanges(data.ranges)\n  let startDT = data.data[0].result_dt_tm\n  let startD = moment(startDT.slice(0, startDT.search(\" \"))).format()\n  let endDT = data.data[data.data.length - 1].result_dt_tm\n  let endD = moment(endDT.slice(0, endDT.search(\" \"))).format()\n  setSelectedDates({\n    start: startD,\n    end: endD\n  })\n\n  return (\n    <>\n        {/* <div className=\"App\">\n          <Nav rAndD={data}/>\n          <Graph rAndD={data}/>\n        </div> */}\n      {glucoseData.length ? \n        <div className=\"App\">\n          <Nav selectedDates={selectedDates} setSelectedDates={setSelectedDates} glucoseData={glucoseData}/>\n          <Graph selectedDates={selectedDates} glucoseData={glucoseData} glucoseRanges={glucoseRanges}/>\n        </div>\n      : \n      <h1 id=\"Loading\">\n        Loading...\n      </h1>}\n    </>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}