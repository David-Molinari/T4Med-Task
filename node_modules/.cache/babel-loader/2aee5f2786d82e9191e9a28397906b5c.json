{"ast":null,"code":"var _jsxFileName = \"/Users/Dmolina5/Desktop/T4Med-Task/t4med-task/src/components/Graph/index.js\";\nimport React, { useEffect } from \"react\";\nimport './Graph.css';\nimport '../../jquery-loader';\nimport ReactFlot from 'react-flot';\nimport '../../../node_modules/react-flot/flot/jquery.flot.time.min';\nimport moment from 'moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Graph(props) {\n  let glucoseDBD = {};\n\n  for (let i = 0; i < props.glucoseData.length; i++) {\n    let reading = props.glucoseData[i];\n    let dT = reading.result_dt_tm;\n    let day = dT.slice(0, 10);\n\n    if (glucoseDBD[day] == undefined) {\n      glucoseDBD[day] = [reading];\n    } else {\n      glucoseDBD[day].push(reading);\n    }\n  }\n\n  let glucoseDBDArr = [];\n\n  for (let i = 0; i < Object.keys(glucoseDBD).length; i++) {\n    let date = Object.keys(glucoseDBD)[i];\n    glucoseDBDArr.push({\n      date: date,\n      result: glucoseDBD[date]\n    });\n  }\n\n  function createData(item) {\n    let data = [];\n\n    for (let i = 0; i < props.glucoseRanges.length; i++) {\n      let dataObj = {\n        range: props.glucoseRanges[i].slice(0, 2),\n        data: [],\n        color: props.glucoseRanges[i][2],\n        series: {\n          lines: {\n            show: true,\n            fill: true,\n            fillColor: {\n              colors: [{\n                opacity: 1\n              }, {\n                opacity: 1\n              }]\n            }\n          }\n        }\n      };\n      data.push(dataObj);\n    }\n\n    for (let i0 = 0; i0 < item.result.length; i0++) {\n      for (let i1 = 0; i1 < data.length; i1++) {\n        let gL = item.result[i0].glucose_level;\n\n        if (gL >= data[i1].range[0] && gL <= data[i1].range[1]) {\n          let time = parseInt(item.result[i0].result_dt_tm.slice(11, 13));\n          data[i1].data.push([time, gL]);\n        }\n      }\n    }\n\n    let TandGL = [];\n\n    for (let i = 0; i < data.length; i++) {\n      if (data[i].data.length != undefined) {\n        data[i].data.forEach(arr => {\n          TandGL.push(arr);\n        });\n      }\n    }\n\n    TandGL.sort((a, b) => {\n      return a[0] - b[0];\n    });\n    let thresholds = [];\n\n    for (let i = 0; i < props.glucoseRanges.length; i++) {\n      thresholds.push(props.glucoseRanges[i][0]);\n      thresholds.push(props.glucoseRanges[i][1]);\n    } // console.log(thresholds, TandGL)\n\n\n    let seriesArr = [];\n\n    for (let i0 = 0; i0 < TandGL.length - 1; i0++) {\n      if (TandGL.length > 0 && TandGL[i0][1] < TandGL[i0 + 1][1]) {\n        let thresholdPasses = [];\n\n        for (let i1 = 0; i1 < thresholds.length; i1++) {\n          if (TandGL[i0][1] < thresholds[i1] && TandGL[i0 + 1][1] > thresholds[i1]) {\n            thresholdPasses.push(thresholds[i1]);\n          }\n        }\n\n        let currentSeries = [TandGL[i0]];\n        let totalTimeGap = TandGL[i0 + 1][0] - TandGL[i0][0];\n        let totalPointsGap = TandGL[i0 + 1][1] - TandGL[i0][1];\n\n        for (let i2 = 0; i2 < thresholdPasses.length; i2++) {\n          let pointsDif = thresholdPasses[i2] - TandGL[i0][1];\n          let percOfTot = pointsDif / totalPointsGap;\n          let timeToAdd = percOfTot * totalTimeGap;\n          let time = timeToAdd + TandGL[i0][0];\n          currentSeries.push([time, thresholdPasses[i2]]);\n\n          if (i2 == thresholdPasses.length - 1) {\n            currentSeries.push(TandGL[i0 + 1]);\n          }\n\n          if (currentSeries.length == 2) {\n            seriesArr.push(currentSeries);\n            currentSeries = [];\n          }\n        }\n      } else if (TandGL.length > 0 && TandGL[i0][1] > TandGL[i0 + 1][1]) {\n        let thresholdPasses = [];\n\n        for (let i1 = 0; i1 < thresholds.length; i1++) {\n          if (TandGL[i0 + 1][1] < thresholds[i1] && TandGL[i0][1] > thresholds[i1]) {\n            thresholdPasses.push(thresholds[i1]);\n          }\n        }\n\n        thresholdPasses.reverse();\n        let currentSeries = [TandGL[i0]];\n        let totalTimeGap = TandGL[i0][0] - TandGL[i0 + 1][0];\n        let totalPointsGap = TandGL[i0 + 1][1] - TandGL[i0][1];\n\n        for (let i2 = 0; i2 < thresholdPasses.length; i2++) {\n          let pointsDif = TandGL[i0][1] - thresholdPasses[i2];\n          let percOfTot = pointsDif / totalPointsGap;\n          let timeToAdd = percOfTot * totalTimeGap;\n          let time = timeToAdd + TandGL[i0][0];\n          currentSeries.push([time, thresholdPasses[i2]]);\n\n          if (i2 == thresholdPasses.length - 1) {\n            currentSeries.push(TandGL[i0 + 1]);\n            currentSeries.push(TandGL[i0 + 1]);\n          }\n\n          if (currentSeries.length == 2) {\n            seriesArr.push(currentSeries);\n            currentSeries = [];\n          }\n        }\n      }\n    }\n\n    console.log(seriesArr);\n    let dataToSend = [];\n\n    for (let i0 = 0; i0 < seriesArr.length; i0++) {\n      let color;\n\n      for (let i1 = 0; i1 < props.glucoseRanges; i1++) {\n        if (seriesArr[i0][0][1] > props.glucoseRanges[i1][0] && seriesArr[i0][0][1] < props.glucoseRanges[i1][1]) {\n          color = props.glucoseRanges[i1][2];\n        }\n      }\n\n      dataToSend.push({\n        data: seriesArr[i0],\n        color: color,\n        series: {\n          lines: {\n            show: true,\n            fill: true,\n            fillColor: {\n              colors: [{\n                opacity: 1\n              }, {\n                opacity: 1\n              }]\n            }\n          }\n        }\n      });\n    }\n\n    return dataToSend;\n  }\n\n  let ticks = [[0, \"00:00\"]];\n\n  for (let i = 2; i < 25; i = i + 2) {\n    if (i < 10) {\n      ticks.push([i, `0${i}:00`]);\n    } else {\n      ticks.push([i, `${i}:00`]);\n    }\n  }\n\n  const options = {\n    xaxis: {\n      min: 0,\n      max: 24,\n      mode: \"time\",\n      timeformat: \"%H:%M\",\n      ticks: ticks\n    },\n    yaxis: {\n      min: 0,\n      max: 700,\n      ticks: [100, 180]\n    },\n    series: {\n      lines: {\n        show: true\n      } // points: { show: true }\n\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: props.selectedDates.start.length > 0 ? glucoseDBDArr.map(item => {\n      let momentS = moment(props.selectedDates.start).format('L');\n      let momentE = moment(props.selectedDates.end).format('L');\n\n      if (item.date >= momentS && item.date <= momentE) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ChartContainer\",\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            className: \"ChartDate\",\n            children: item.date\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(ReactFlot, {\n            id: `${item.date.replaceAll('/', '')}`,\n            className: \"FlotChart\",\n            data: createData(item),\n            options: options,\n            width: \"100%\",\n            height: \"250px\"\n          }, `key${item.date.replaceAll('/', '')}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 29\n        }, this);\n      }\n    }) : \" \"\n  }, void 0, false);\n}\n\n_c = Graph;\nexport default Graph;\n\nvar _c;\n\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"sources":["/Users/Dmolina5/Desktop/T4Med-Task/t4med-task/src/components/Graph/index.js"],"names":["React","useEffect","ReactFlot","moment","Graph","props","glucoseDBD","i","glucoseData","length","reading","dT","result_dt_tm","day","slice","undefined","push","glucoseDBDArr","Object","keys","date","result","createData","item","data","glucoseRanges","dataObj","range","color","series","lines","show","fill","fillColor","colors","opacity","i0","i1","gL","glucose_level","time","parseInt","TandGL","forEach","arr","sort","a","b","thresholds","seriesArr","thresholdPasses","currentSeries","totalTimeGap","totalPointsGap","i2","pointsDif","percOfTot","timeToAdd","reverse","console","log","dataToSend","ticks","options","xaxis","min","max","mode","timeformat","yaxis","selectedDates","start","map","momentS","format","momentE","end","replaceAll"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport './Graph.css';\nimport '../../jquery-loader';\nimport ReactFlot from 'react-flot';\nimport '../../../node_modules/react-flot/flot/jquery.flot.time.min';\nimport moment from 'moment';\n\nfunction Graph(props) {\n\n    let glucoseDBD = {}\n\n    for (let i = 0; i < props.glucoseData.length; i++) {\n        let reading = props.glucoseData[i]\n        let dT = reading.result_dt_tm\n        let day = dT.slice(0,10)\n        if (glucoseDBD[day] == undefined) {\n            glucoseDBD[day] = [reading]\n        } else {\n            glucoseDBD[day].push(reading)\n        }\n    }\n\n    let glucoseDBDArr = []\n\n    for (let i = 0; i < Object.keys(glucoseDBD).length; i++) {\n        let date = Object.keys(glucoseDBD)[i]\n        glucoseDBDArr.push({\n            date: date,\n            result: glucoseDBD[date]\n        })\n    }\n\n    function createData(item) {\n        let data = []\n\n        for (let i = 0; i < props.glucoseRanges.length; i++) {\n            let dataObj = {\n                range: props.glucoseRanges[i].slice(0,2),\n                data: [],\n                color: props.glucoseRanges[i][2],\n                series: {\n                    lines: { \n                        show: true, \n                        fill: true, \n                        fillColor: {\n                            colors: [{ opacity: 1 }, { opacity: 1 } ]\n                        }\n                    }\n                }\n            }\n            data.push(dataObj)\n        }\n\n        for (let i0 = 0; i0 < item.result.length; i0++) {\n            for (let i1 = 0; i1 < data.length; i1++) {\n                let gL = item.result[i0].glucose_level\n                if (gL >= data[i1].range[0] && gL <= data[i1].range[1]) {\n                    let time = parseInt(item.result[i0].result_dt_tm.slice(11,13))\n                    data[i1].data.push([time, gL])\n                }\n            }\n        }\n\n        let TandGL = []\n\n        for (let i = 0; i< data.length; i++) {\n            if (data[i].data.length != undefined) {\n                data[i].data.forEach((arr) => {\n                    TandGL.push(arr)\n                })\n            }\n        }\n\n        TandGL.sort((a, b) => {\n            return a[0] - b[0]\n        })\n\n        let thresholds = []\n\n        for (let i = 0; i < props.glucoseRanges.length; i++) {\n            thresholds.push(props.glucoseRanges[i][0])\n            thresholds.push(props.glucoseRanges[i][1])\n        }\n\n        // console.log(thresholds, TandGL)\n\n        let seriesArr = []\n\n        for (let i0 = 0; i0 < TandGL.length - 1; i0++) {\n            if (TandGL.length > 0 && TandGL[i0][1] < TandGL[i0+1][1]) {\n                let thresholdPasses = []\n                for (let i1 = 0; i1 < thresholds.length; i1++) {\n                    if (TandGL[i0][1] < thresholds[i1] && \n                        TandGL[i0+1][1] > thresholds[i1]) {\n                        thresholdPasses.push(thresholds[i1])\n                    }\n                }\n                let currentSeries = [TandGL[i0]]\n                let totalTimeGap = TandGL[i0+1][0] - TandGL[i0][0]\n                let totalPointsGap = TandGL[i0+1][1] - TandGL[i0][1]\n                for (let i2 = 0; i2 < thresholdPasses.length; i2++) {\n                    let pointsDif = thresholdPasses[i2] - TandGL[i0][1]\n                    let percOfTot = pointsDif/totalPointsGap\n                    let timeToAdd = percOfTot * totalTimeGap \n                    let time = timeToAdd + TandGL[i0][0]\n                    currentSeries.push([time, thresholdPasses[i2]])\n                    if (i2 == thresholdPasses.length - 1 ) {\n                        currentSeries.push(TandGL[i0+1])\n                    }\n                    if (currentSeries.length == 2) {\n                        seriesArr.push(currentSeries)\n                        currentSeries = []\n                    }\n                }\n            } else if (TandGL.length > 0 && TandGL[i0][1] > TandGL[i0+1][1]) {\n                let thresholdPasses = []\n                for (let i1 = 0; i1 < thresholds.length; i1++) {\n                    if (TandGL[i0+1][1] < thresholds[i1] && \n                        TandGL[i0][1] > thresholds[i1]) {\n                        thresholdPasses.push(thresholds[i1])\n                    }\n                }\n                thresholdPasses.reverse()\n                let currentSeries = [TandGL[i0]]\n                let totalTimeGap = TandGL[i0][0] - TandGL[i0+1][0]\n                let totalPointsGap = TandGL[i0+1][1] - TandGL[i0][1]\n                for (let i2 = 0; i2 < thresholdPasses.length; i2++) {\n                    let pointsDif = TandGL[i0][1] - thresholdPasses[i2]\n                    let percOfTot = pointsDif/totalPointsGap\n                    let timeToAdd = percOfTot * totalTimeGap \n                    let time = timeToAdd + TandGL[i0][0]\n                    currentSeries.push([time, thresholdPasses[i2]])\n                    if (i2 == thresholdPasses.length - 1 ) {\n                        currentSeries.push(TandGL[i0+1])\n                        currentSeries.push(TandGL[i0+1])\n                    }\n                    if (currentSeries.length == 2) {\n                        seriesArr.push(currentSeries)\n                        currentSeries = []\n                    }\n                }\n            }\n        }\n\n        console.log(seriesArr)\n\n        let dataToSend = []\n\n        for (let i0 = 0; i0 < seriesArr.length; i0++) {\n            let color\n            for (let i1 = 0; i1 < props.glucoseRanges; i1++) {\n                if (seriesArr[i0][0][1] > props.glucoseRanges[i1][0] &&\n                    seriesArr[i0][0][1] < props.glucoseRanges[i1][1]) {\n                    color = props.glucoseRanges[i1][2]\n                }\n            }\n            dataToSend.push({\n                data: seriesArr[i0],\n                color: color,\n                series: {\n                    lines: { \n                        show: true, \n                        fill: true, \n                        fillColor: {\n                            colors: [{ opacity: 1 }, { opacity: 1 } ]\n                        } \n                    }\n                } \n            })\n        }\n\n        return dataToSend\n    }\n\n    let ticks = [[0,\"00:00\"]]\n\n    for (let i = 2; i < 25; i = i + 2) {\n        if (i < 10) {\n            ticks.push([i, `0${i}:00`])\n        } else {\n            ticks.push([i, `${i}:00`]) \n        }\n    }\n\n    const options = {\n        xaxis: {\n            min: 0, \n            max: 24, \n            mode: \"time\", \n            timeformat: \"%H:%M\",\n            ticks: ticks\n        }, \n        yaxis: {\n            min: 0, \n            max: 700,\n            ticks: [100, 180]\n        },\n        series: {\n            lines: { show: true },\n            // points: { show: true }\n        }\n    }\n\n    return (\n        <>\n            {\n            props.selectedDates.start.length > 0 ?\n                glucoseDBDArr.map((item) => {\n                    let momentS = moment(props.selectedDates.start).format('L')\n                    let momentE = moment(props.selectedDates.end).format('L')\n                    if (item.date >= momentS && item.date <= momentE) {\n                        return (\n                            <div className=\"ChartContainer\">\n                                <h5 className=\"ChartDate\">\n                                    {item.date}\n                                </h5>\n                                <ReactFlot \n                                key={`key${item.date.replaceAll('/', '')}`}\n                                id={`${item.date.replaceAll('/', '')}`} \n                                className=\"FlotChart\"\n                                data={createData(item)} \n                                options={options} \n                                width=\"100%\" \n                                height=\"250px\" \n                            />\n                            </div>\n                        )\n\n                    }\n                })\n            : \" \"\n            }\n        </>\n      );\n\n}\n\nexport default Graph;"]},"metadata":{},"sourceType":"module"}