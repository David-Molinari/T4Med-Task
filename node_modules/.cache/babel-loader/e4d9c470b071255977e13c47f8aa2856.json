{"ast":null,"code":"var _jsxFileName = \"/Users/Dmolina5/Desktop/T4Med-Task/t4med-task/src/components/Graph/index.js\";\nimport React, { useEffect } from \"react\";\nimport './Graph.css';\nimport '../../jquery-loader';\nimport ReactFlot from 'react-flot';\nimport '../../../node_modules/react-flot/flot/jquery.flot.time.min';\nimport moment from 'moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Graph(props) {\n  let glucoseDBD = {};\n\n  for (let i = 0; i < props.glucoseData.length; i++) {\n    let reading = props.glucoseData[i];\n    let dT = reading.result_dt_tm;\n    let day = dT.slice(0, 10);\n\n    if (glucoseDBD[day] == undefined) {\n      glucoseDBD[day] = [reading];\n    } else {\n      glucoseDBD[day].push(reading);\n    }\n  }\n\n  let glucoseDBDArr = [];\n\n  for (let i = 0; i < Object.keys(glucoseDBD).length; i++) {\n    let date = Object.keys(glucoseDBD)[i];\n    glucoseDBDArr.push({\n      date: date,\n      result: glucoseDBD[date]\n    });\n  }\n\n  function createData(item) {\n    let data = [];\n\n    for (let i = 0; i < props.glucoseRanges.length; i++) {\n      let dataObj = {\n        range: props.glucoseRanges[i].slice(0, 2),\n        data: [],\n        color: props.glucoseRanges[i][2],\n        series: {\n          lines: {\n            show: true,\n            fill: true,\n            fillColor: {\n              colors: [{\n                opacity: 1\n              }, {\n                opacity: 1\n              }]\n            }\n          }\n        }\n      };\n      data.push(dataObj);\n    }\n\n    for (let i0 = 0; i0 < item.result.length; i0++) {\n      for (let i1 = 0; i1 < data.length; i1++) {\n        let gL = item.result[i0].glucose_level;\n\n        if (gL >= data[i1].range[0] && gL <= data[i1].range[1]) {\n          let time = parseInt(item.result[i0].result_dt_tm.slice(11, 13));\n          data[i1].data.push([time, gL]);\n        }\n      }\n    }\n\n    console.log(data);\n    data.sort((a, b) => {\n      return a.data[0][0] - b.data[0][0];\n    });\n    console.log(data); // let dataPreSort = []\n    // for (let i = 0; i < data.length; i++) {\n    //     if (data[i].data[0] != undefined) {\n    //         dataPreSort.push(data[i])\n    //     } \n    // }\n    // let dataSorted = dataPreSort.sort((a, b) => {\n    //     return a.data[0][0] - b.data[0][0]\n    // })\n    // console.log(dataSorted)\n    // for (let i = 0; i < dataSorted.length; i++) {\n    //     if (dataSorted.length == 0) {\n    //         break\n    //     } else if (i == 0) {\n    //     }\n    //     let itemT = dataSorted[i].data[dataSorted[i].data.length-1][0]\n    //     let itemGL = dataSorted[i].data[0][1]\n    //     let nItemT = \n    // }\n\n    return data;\n  }\n\n  let ticks = [[0, \"00:00\"]];\n\n  for (let i = 2; i < 25; i = i + 2) {\n    if (i < 10) {\n      ticks.push([i, `0${i}:00`]);\n    } else {\n      ticks.push([i, `${i}:00`]);\n    }\n  }\n\n  const options = {\n    xaxis: {\n      min: 0,\n      max: 24,\n      mode: \"time\",\n      timeformat: \"%H:%M\",\n      ticks: ticks\n    },\n    yaxis: {\n      min: 0,\n      max: 350,\n      ticks: [100, 180]\n    },\n    series: {\n      lines: {\n        show: true\n      },\n      points: {\n        show: true\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: props.selectedDates.start.length > 0 ? glucoseDBDArr.map(item => {\n      let momentS = moment(props.selectedDates.start).format('L');\n      let momentE = moment(props.selectedDates.end).format('L');\n\n      if (item.date >= momentS && item.date <= momentE) {\n        return /*#__PURE__*/_jsxDEV(ReactFlot, {\n          id: \"product-chart\",\n          data: createData(item),\n          options: options,\n          width: \"100%\",\n          height: \"250px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 29\n        }, this);\n      }\n    }) : \" \"\n  }, void 0, false);\n}\n\n_c = Graph;\nexport default Graph;\n\nvar _c;\n\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"sources":["/Users/Dmolina5/Desktop/T4Med-Task/t4med-task/src/components/Graph/index.js"],"names":["React","useEffect","ReactFlot","moment","Graph","props","glucoseDBD","i","glucoseData","length","reading","dT","result_dt_tm","day","slice","undefined","push","glucoseDBDArr","Object","keys","date","result","createData","item","data","glucoseRanges","dataObj","range","color","series","lines","show","fill","fillColor","colors","opacity","i0","i1","gL","glucose_level","time","parseInt","console","log","sort","a","b","ticks","options","xaxis","min","max","mode","timeformat","yaxis","points","selectedDates","start","map","momentS","format","momentE","end"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport './Graph.css';\nimport '../../jquery-loader';\nimport ReactFlot from 'react-flot';\nimport '../../../node_modules/react-flot/flot/jquery.flot.time.min';\nimport moment from 'moment';\n\nfunction Graph(props) {\n\n    let glucoseDBD = {}\n\n    for (let i = 0; i < props.glucoseData.length; i++) {\n        let reading = props.glucoseData[i]\n        let dT = reading.result_dt_tm\n        let day = dT.slice(0,10)\n        if (glucoseDBD[day] == undefined) {\n            glucoseDBD[day] = [reading]\n        } else {\n            glucoseDBD[day].push(reading)\n        }\n    }\n\n    let glucoseDBDArr = []\n\n    for (let i = 0; i < Object.keys(glucoseDBD).length; i++) {\n        let date = Object.keys(glucoseDBD)[i]\n        glucoseDBDArr.push({\n            date: date,\n            result: glucoseDBD[date]\n        })\n    }\n\n    function createData(item) {\n        let data = []\n\n        for (let i = 0; i < props.glucoseRanges.length; i++) {\n            let dataObj = {\n                range: props.glucoseRanges[i].slice(0,2),\n                data: [],\n                color: props.glucoseRanges[i][2],\n                series: {\n                    lines: { \n                        show: true, \n                        fill: true, \n                        fillColor: {\n                            colors: [{ opacity: 1 }, { opacity: 1 } ]\n                        }\n                    }\n                }\n            }\n            data.push(dataObj)\n        }\n\n        for (let i0 = 0; i0 < item.result.length; i0++) {\n            for (let i1 = 0; i1 < data.length; i1++) {\n                let gL = item.result[i0].glucose_level\n                if (gL >= data[i1].range[0] && gL <= data[i1].range[1]) {\n                    let time = parseInt(item.result[i0].result_dt_tm.slice(11,13))\n                    data[i1].data.push([time, gL])\n                }\n            }\n        }\n\n        console.log(data)\n\n        data.sort((a, b) => {\n            return a.data[0][0] - b.data[0][0]\n        })\n\n        console.log(data)\n\n        // let dataPreSort = []\n\n        // for (let i = 0; i < data.length; i++) {\n        //     if (data[i].data[0] != undefined) {\n        //         dataPreSort.push(data[i])\n        //     } \n        // }\n\n        // let dataSorted = dataPreSort.sort((a, b) => {\n        //     return a.data[0][0] - b.data[0][0]\n        // })\n\n        // console.log(dataSorted)\n\n        // for (let i = 0; i < dataSorted.length; i++) {\n        //     if (dataSorted.length == 0) {\n        //         break\n        //     } else if (i == 0) {\n\n        //     }\n        //     let itemT = dataSorted[i].data[dataSorted[i].data.length-1][0]\n        //     let itemGL = dataSorted[i].data[0][1]\n        //     let nItemT = \n        // }\n\n\n        return data\n    }\n\n    let ticks = [[0,\"00:00\"]]\n\n    for (let i = 2; i < 25; i = i + 2) {\n        if (i < 10) {\n            ticks.push([i, `0${i}:00`])\n        } else {\n            ticks.push([i, `${i}:00`]) \n        }\n    }\n\n    const options = {\n        xaxis: {\n            min: 0, \n            max: 24, \n            mode: \"time\", \n            timeformat: \"%H:%M\",\n            ticks: ticks\n        }, \n        yaxis: {\n            min: 0, \n            max: 350,\n            ticks: [100, 180]\n        },\n        series: {\n            lines: { show: true },\n            points: { show: true }\n        }\n    }\n\n    return (\n        <>\n            {\n            props.selectedDates.start.length > 0 ?\n                glucoseDBDArr.map((item) => {\n                    let momentS = moment(props.selectedDates.start).format('L')\n                    let momentE = moment(props.selectedDates.end).format('L')\n                    if (item.date >= momentS && item.date <= momentE) {\n                        return (\n                            <ReactFlot id=\"product-chart\" data={createData(item)} options={options} width=\"100%\" height=\"250px\" />\n                        )\n\n                    }\n                })\n            : \" \"\n            }\n        </>\n      );\n\n}\n\nexport default Graph;"]},"metadata":{},"sourceType":"module"}