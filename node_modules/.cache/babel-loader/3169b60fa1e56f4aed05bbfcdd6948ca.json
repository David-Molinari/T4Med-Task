{"ast":null,"code":"var _jsxFileName = \"/Users/Dmolina5/Desktop/glucose-reader-app/glucose-reader-fe/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport './App.css';\nimport moment from \"moment\";\nimport Nav from \"./components/Nav\";\nimport Graph from \"./components/Graph\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst GET_RANGES_AND_DATA = gql`\n  query GetRangesAndData {\n    ranges {\n      low_bound\n      high_bound\n      color\n    }\n    data {\n      result_id\n      result_dt_tm\n      glucose_level\n      glucose_level_unit\n      source\n    }\n  }\n`;\n\nfunction App() {\n  _s();\n\n  const [glucoseData, setGlucoseData] = useState([]);\n  const [glucoseRanges, setGlucoseRanges] = useState([]);\n  const [selectedDates, setSelectedDates] = useState({\n    start: \"\",\n    end: \"\"\n  });\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_RANGES_AND_DATA); // On load of data, set initial state\n\n  useEffect(() => {\n    if (!loading) {\n      setGlucoseData(data.data);\n      let rangesToArrays = [];\n      data.ranges.forEach(r => {\n        rangesToArrays.push([r.low_bound, r.high_bound, r.color]);\n      });\n      rangesToArrays.sort(function (a, b) {\n        return a.low_bound - b.low_bound;\n      });\n      setGlucoseRanges(rangesToArrays);\n      let startDT = data.data[0].result_dt_tm;\n      let startD = moment(startDT.slice(0, startDT.search(\" \"))).format();\n      let endDT = data.data[data.data.length - 1].result_dt_tm;\n      let endD = moment(endDT.slice(0, endDT.search(\" \"))).format();\n      setSelectedDates({\n        start: startD,\n        end: endD\n      });\n    }\n  }, [data]);\n  if (error) return `${error}`;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: !loading && glucoseData.length ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Nav, {\n        selectedDates: selectedDates,\n        setSelectedDates: setSelectedDates,\n        glucoseData: glucoseData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Graph, {\n        selectedDates: selectedDates,\n        glucoseData: glucoseData,\n        glucoseRanges: glucoseRanges\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n      id: \"Loading\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n\n_s(App, \"4/cd8qH0W1gsLQsYVlJ3cfBuHac=\", false, function () {\n  return [useQuery];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/Dmolina5/Desktop/glucose-reader-app/glucose-reader-fe/src/App.js"],"names":["React","useEffect","useState","moment","Nav","Graph","useQuery","gql","GET_RANGES_AND_DATA","App","glucoseData","setGlucoseData","glucoseRanges","setGlucoseRanges","selectedDates","setSelectedDates","start","end","loading","error","data","rangesToArrays","ranges","forEach","r","push","low_bound","high_bound","color","sort","a","b","startDT","result_dt_tm","startD","slice","search","format","endDT","length","endD"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport './App.css';\nimport moment from \"moment\";\nimport Nav from \"./components/Nav\";\nimport Graph from \"./components/Graph\";\nimport {\n  useQuery,\n  gql\n} from \"@apollo/client\";\n\nconst GET_RANGES_AND_DATA = gql`\n  query GetRangesAndData {\n    ranges {\n      low_bound\n      high_bound\n      color\n    }\n    data {\n      result_id\n      result_dt_tm\n      glucose_level\n      glucose_level_unit\n      source\n    }\n  }\n`;\n\nfunction App() {\n\n  const [glucoseData, setGlucoseData] = useState([])\n  const [glucoseRanges, setGlucoseRanges] = useState([])\n  const [selectedDates, setSelectedDates] = useState({\n    start: \"\",\n    end: \"\"\n  })\n\n  const { loading, error, data } = useQuery(GET_RANGES_AND_DATA);\n\n  // On load of data, set initial state\n  useEffect(()=> {\n    if (!loading) {\n      setGlucoseData(data.data)\n      let rangesToArrays = []\n      data.ranges.forEach((r)=> {\n        rangesToArrays.push([r.low_bound, r.high_bound, r.color])\n      })\n      rangesToArrays.sort(function(a, b) {\n        return a.low_bound - b.low_bound;\n      });\n      setGlucoseRanges(rangesToArrays)\n      let startDT = data.data[0].result_dt_tm\n      let startD = moment(startDT.slice(0, startDT.search(\" \"))).format()\n      let endDT = data.data[data.data.length - 1].result_dt_tm\n      let endD = moment(endDT.slice(0, endDT.search(\" \"))).format()\n      setSelectedDates({\n        start: startD,\n        end: endD\n      })\n    }\n  }, [data])\n\n  if (error) return `${error}`;\n\n  return (\n    <>\n      {!loading && glucoseData.length ? \n        <div className=\"App\">\n          <Nav selectedDates={selectedDates} setSelectedDates={setSelectedDates} glucoseData={glucoseData}/>\n          <Graph selectedDates={selectedDates} glucoseData={glucoseData} glucoseRanges={glucoseRanges}/>\n        </div>\n      : \n        <h1 id=\"Loading\">\n          Loading...\n        </h1>\n      }\n    </>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}