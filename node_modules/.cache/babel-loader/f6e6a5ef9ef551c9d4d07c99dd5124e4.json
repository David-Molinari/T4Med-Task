{"ast":null,"code":"var _jsxFileName = \"/Users/Dmolina5/Desktop/glucose-reader-app/glucose-reader-fe/src/components/Graph/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport './Graph.css';\nimport '../../jquery-loader';\nimport ReactFlot from 'react-flot';\nimport '../../../node_modules/react-flot/flot/jquery.flot.time.min';\nimport moment from 'moment';\nimport { createData } from './GraphUtils';\nimport ModalComp from '../Modal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Graph(props) {\n  _s();\n\n  console.log(props);\n  const [modal, setModal] = useState({\n    open: false,\n    data: {\n      glucoseLevel: 0,\n      resultDate: \"\",\n      source: \"\",\n      resultId: \"\"\n    }\n  }); // On date change, update DOM on delay\n  // to allow plotclick to attach\n\n  const [ready, setReady] = useState(false);\n  useEffect(() => {\n    setTimeout(() => {\n      setReady(false);\n      setReady(true);\n    }, [100]);\n  }, [props.selectedDates]); // Build object of glucose readings by day\n\n  let glucoseDBD = {};\n\n  for (let i = 0; i < props.glucoseData.length; i++) {\n    let reading = props.glucoseData[i];\n    let dT = reading.result_dt_tm;\n    let day = dT.slice(0, 10);\n\n    if (glucoseDBD[day] == undefined) {\n      glucoseDBD[day] = [reading];\n    } else {\n      glucoseDBD[day].push(reading);\n    }\n  } // Build array of glucose readings by day\n\n\n  let glucoseDBDArr = [];\n\n  for (let i = 0; i < Object.keys(glucoseDBD).length; i++) {\n    let date = Object.keys(glucoseDBD)[i];\n    glucoseDBDArr.push({\n      date: date,\n      result: glucoseDBD[date]\n    });\n  }\n\n  glucoseDBDArr.reverse(); // Format x-axis ticks\n\n  let ticks = [[0, \"00:00\"]];\n\n  for (let i = 2; i < 25; i = i + 2) {\n    if (i < 10) {\n      ticks.push([i, `0${i}:00`]);\n    } else {\n      ticks.push([i, `${i}:00`]);\n    }\n  }\n\n  if (window.innerWidth < 725) {\n    ticks = [[0, \"00\"]];\n\n    for (let i = 2; i < 25; i = i + 2) {\n      if (i < 10) {\n        ticks.push([i, `0${i}`]);\n      } else {\n        ticks.push([i, `${i}`]);\n      }\n    }\n  } // Define options for flot graphs\n\n\n  const options = {\n    xaxis: {\n      min: 0,\n      max: 24,\n      mode: \"time\",\n      timeformat: \"%H:%M\",\n      ticks: ticks\n    },\n    yaxis: {\n      min: 0,\n      max: 700,\n      ticks: [100, 180]\n    },\n    series: {\n      lines: {\n        show: true,\n        lineWidth: 5\n      }\n    },\n    grid: {\n      clickable: true,\n      autoHighlight: false\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"Graphs\",\n    children: [// Map graphs in range of selected dates\n    props.selectedDates.start.length > 0 ? glucoseDBDArr.map(item => {\n      let momentS = moment(props.selectedDates.start).format('L');\n      let momentE = moment(props.selectedDates.end).format('L'); // Add special classes to first and last chart for styling\n\n      if (item.date >= momentS && item.date <= momentE) {\n        let addClass = \"\";\n\n        if (momentS == momentE) {\n          addClass = \"onlyChart\";\n        } else if (momentS == item.date) {\n          addClass = \"lastChart\";\n        }\n\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `ChartContainer ${addClass}`,\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            className: \"ChartDate\",\n            children: item.date\n          }, `cd${item.date.replaceAll('/', '')}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(ReactFlot, {\n            id: `${item.date.replaceAll('/', '')}`,\n            className: \"FlotChart\",\n            data: createData(item, props, setModal),\n            options: options,\n            width: \"100%\",\n            height: \"250px\"\n          }, `rf${item.date.replaceAll('/', '')}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 33\n          }, this)]\n        }, `cc${item.date.replaceAll('/', '')}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 29\n        }, this);\n      }\n    }) : \" \", /*#__PURE__*/_jsxDEV(ModalComp, {\n      id: \"Modal\",\n      modal: modal,\n      setModal: setModal,\n      glucoseRanges: props.glucoseRanges\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Graph, \"vzG1b8SerG4YgjLexuQZK1Ay0gg=\");\n\n_c = Graph;\nexport default Graph;\n\nvar _c;\n\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"sources":["/Users/Dmolina5/Desktop/glucose-reader-app/glucose-reader-fe/src/components/Graph/index.js"],"names":["React","useState","useEffect","ReactFlot","moment","createData","ModalComp","Graph","props","console","log","modal","setModal","open","data","glucoseLevel","resultDate","source","resultId","ready","setReady","setTimeout","selectedDates","glucoseDBD","i","glucoseData","length","reading","dT","result_dt_tm","day","slice","undefined","push","glucoseDBDArr","Object","keys","date","result","reverse","ticks","window","innerWidth","options","xaxis","min","max","mode","timeformat","yaxis","series","lines","show","lineWidth","grid","clickable","autoHighlight","start","map","item","momentS","format","momentE","end","addClass","replaceAll","glucoseRanges"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport './Graph.css';\nimport '../../jquery-loader';\nimport ReactFlot from 'react-flot';\nimport '../../../node_modules/react-flot/flot/jquery.flot.time.min';\nimport moment from 'moment';\nimport { createData } from './GraphUtils';\nimport ModalComp from '../Modal';\n\nfunction Graph(props) {\n\n    console.log(props)\n\n    const [modal, setModal] = useState({\n        open: false,\n        data: {\n            glucoseLevel: 0,\n            resultDate: \"\",\n            source: \"\",\n            resultId: \"\"\n        }\n    })\n\n    // On date change, update DOM on delay\n    // to allow plotclick to attach\n    const [ready, setReady] = useState(false)\n    useEffect(()=> {\n        setTimeout(()=> {\n            setReady(false)\n            setReady(true)\n        }, [100])\n    }, [props.selectedDates])\n\n    // Build object of glucose readings by day\n    let glucoseDBD = {}\n    for (let i = 0; i < props.glucoseData.length; i++) {\n        let reading = props.glucoseData[i]\n        let dT = reading.result_dt_tm\n        let day = dT.slice(0,10)\n        if (glucoseDBD[day] == undefined) {\n            glucoseDBD[day] = [reading]\n        } else {\n            glucoseDBD[day].push(reading)\n        }\n    }\n\n    // Build array of glucose readings by day\n    let glucoseDBDArr = []\n    for (let i = 0; i < Object.keys(glucoseDBD).length; i++) {\n        let date = Object.keys(glucoseDBD)[i]\n        glucoseDBDArr.push({\n            date: date,\n            result: glucoseDBD[date]\n        })\n    }\n    glucoseDBDArr.reverse()\n\n    // Format x-axis ticks\n    let ticks = [[0,\"00:00\"]]\n    for (let i = 2; i < 25; i = i + 2) {\n        if (i < 10) {\n            ticks.push([i, `0${i}:00`])\n        } else {\n            ticks.push([i, `${i}:00`]) \n        }\n    }\n    \n    if (window.innerWidth < 725) {\n        ticks = [[0,\"00\"]]\n        for (let i = 2; i < 25; i = i + 2) {\n            if (i < 10) {\n                ticks.push([i, `0${i}`])\n            } else {\n                ticks.push([i, `${i}`]) \n            }\n        }\n    }\n\n    // Define options for flot graphs\n    const options = {\n        xaxis: {\n            min: 0, \n            max: 24, \n            mode: \"time\", \n            timeformat: \"%H:%M\",\n            ticks: ticks\n        }, \n        yaxis: {\n            min: 0, \n            max: 700,\n            ticks: [100, 180]\n        },\n        series: {\n            lines: { \n                show: true, \n                lineWidth: 5 \n            }\n        },\n        grid: {\n            clickable: true,\n            autoHighlight: false\n        }\n    }\n\n    return (\n        <div id=\"Graphs\">\n            {\n            // Map graphs in range of selected dates\n            props.selectedDates.start.length > 0 ?\n                glucoseDBDArr.map((item) => {\n                    let momentS = moment(props.selectedDates.start).format('L')\n                    let momentE = moment(props.selectedDates.end).format('L')\n                    // Add special classes to first and last chart for styling\n                    if (item.date >= momentS && item.date <= momentE) {\n                        let addClass = \"\"\n                        if (momentS == momentE) {\n                            addClass = \"onlyChart\"\n                        } else if (momentS == item.date) {\n                            addClass = \"lastChart\"\n                        }\n                        return (\n                            <div \n                                key={`cc${item.date.replaceAll('/', '')}`}\n                                className={`ChartContainer ${addClass}`}\n                            >\n                                <h5 \n                                    key={`cd${item.date.replaceAll('/', '')}`}\n                                    className=\"ChartDate\"\n                                >\n                                    {item.date}\n                                </h5>\n                                <ReactFlot\n                                    key={`rf${item.date.replaceAll('/', '')}`}\n                                    id={`${item.date.replaceAll('/', '')}`} \n                                    className=\"FlotChart\"\n                                    data={createData(item, props, setModal)} \n                                    options={options} \n                                    width=\"100%\" \n                                    height=\"250px\" \n                                />\n                            </div>\n                        )\n                    }\n                })\n            : \" \"\n            }\n            <ModalComp\n                id=\"Modal\"\n                modal={modal} \n                setModal={setModal}\n                glucoseRanges={props.glucoseRanges}\n            />\n        </div>\n    );\n}\n\nexport default Graph;"]},"metadata":{},"sourceType":"module"}