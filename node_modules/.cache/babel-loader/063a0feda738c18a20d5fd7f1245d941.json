{"ast":null,"code":"var _jsxFileName = \"/Users/Dmolina5/Desktop/glucose-reader-app/glucose-reader-fe/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport './App.css';\nimport moment from \"moment\";\nimport Nav from \"./components/Nav\";\nimport Graph from \"./components/Graph\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport { Modal, ModalBody } from 'reactstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst GET_RANGES_AND_DATA = gql`\n  query GetRangesAndData {\n    ranges {\n      low_bound\n      high_bound\n      color\n    }\n    data {\n      result_id\n      result_dt_tm\n      glucose_level\n      glucose_level_unit\n      source\n    }\n  }\n`;\n\nfunction App() {\n  _s();\n\n  const [glucoseData, setGlucoseData] = useState([]);\n  const [glucoseRanges, setGlucoseRanges] = useState([]);\n  const [selectedDates, setSelectedDates] = useState({\n    start: \"\",\n    end: \"\"\n  });\n  const [modalOpen, setModalOpen] = useState(true);\n\n  const toggle = () => setModalOpen(false);\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_RANGES_AND_DATA); // On load of data, set initial state\n\n  useEffect(() => {\n    if (!loading) {\n      setGlucoseData(data.data);\n      let rangesToArrays = [];\n      data.ranges.forEach(r => {\n        rangesToArrays.push([r.low_bound, r.high_bound, r.color]);\n      });\n      rangesToArrays.sort(function (a, b) {\n        return a[0] - b[0];\n      });\n      setGlucoseRanges(rangesToArrays);\n      let startDT = data.data[0].result_dt_tm;\n      let startD = moment(startDT.slice(0, startDT.search(\" \"))).format();\n      let endDT = data.data[data.data.length - 1].result_dt_tm;\n      let endD = moment(endDT.slice(0, endDT.search(\" \"))).format();\n      setSelectedDates({\n        start: startD,\n        end: endD\n      });\n    }\n  }, [data]);\n  if (error) return `${error}`;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: !loading && glucoseData.length ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Modal, {\n        isOpen: modalOpen,\n        className: \"Modal\",\n        children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n          id: \"ModalHeader\",\n          toggle: toggle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n          className: \"ModalBody\",\n          children: \"Click data points (colored circles) for more data on that reading\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Nav, {\n        selectedDates: selectedDates,\n        setSelectedDates: setSelectedDates,\n        glucoseData: glucoseData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Graph, {\n        selectedDates: selectedDates,\n        glucoseData: glucoseData,\n        glucoseRanges: glucoseRanges\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n      id: \"Loading\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n\n_s(App, \"gJK1uf9z0Nhge1Pg5xkoY2dxq/k=\", false, function () {\n  return [useQuery];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/Dmolina5/Desktop/glucose-reader-app/glucose-reader-fe/src/App.js"],"names":["React","useEffect","useState","moment","Nav","Graph","useQuery","gql","Modal","ModalBody","GET_RANGES_AND_DATA","App","glucoseData","setGlucoseData","glucoseRanges","setGlucoseRanges","selectedDates","setSelectedDates","start","end","modalOpen","setModalOpen","toggle","loading","error","data","rangesToArrays","ranges","forEach","r","push","low_bound","high_bound","color","sort","a","b","startDT","result_dt_tm","startD","slice","search","format","endDT","length","endD"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport './App.css';\nimport moment from \"moment\";\nimport Nav from \"./components/Nav\";\nimport Graph from \"./components/Graph\";\nimport {\n  useQuery,\n  gql\n} from \"@apollo/client\";\nimport { Modal, ModalBody } from 'reactstrap';\n\nconst GET_RANGES_AND_DATA = gql`\n  query GetRangesAndData {\n    ranges {\n      low_bound\n      high_bound\n      color\n    }\n    data {\n      result_id\n      result_dt_tm\n      glucose_level\n      glucose_level_unit\n      source\n    }\n  }\n`;\n\nfunction App() {\n\n  const [glucoseData, setGlucoseData] = useState([])\n  const [glucoseRanges, setGlucoseRanges] = useState([])\n  const [selectedDates, setSelectedDates] = useState({\n    start: \"\",\n    end: \"\"\n  })\n  const [modalOpen, setModalOpen] = useState(true)\n\n  const toggle = () => setModalOpen(false);\n\n  const { loading, error, data } = useQuery(GET_RANGES_AND_DATA);\n\n  // On load of data, set initial state\n  useEffect(()=> {\n    if (!loading) {\n      setGlucoseData(data.data)\n      let rangesToArrays = []\n      data.ranges.forEach((r)=> {\n        rangesToArrays.push([r.low_bound, r.high_bound, r.color])\n      })\n      rangesToArrays.sort(function(a, b) {\n        return a[0] - b[0];\n      });\n      setGlucoseRanges(rangesToArrays)\n      let startDT = data.data[0].result_dt_tm\n      let startD = moment(startDT.slice(0, startDT.search(\" \"))).format()\n      let endDT = data.data[data.data.length - 1].result_dt_tm\n      let endD = moment(endDT.slice(0, endDT.search(\" \"))).format()\n      setSelectedDates({\n        start: startD,\n        end: endD\n      })\n    }\n  }, [data])\n\n  if (error) return `${error}`;\n\n  return (\n    <>\n      {!loading && glucoseData.length ? \n        <div className=\"App\">\n            <Modal isOpen={modalOpen} className=\"Modal\">\n              <ModalHeader \n                    id=\"ModalHeader\" \n                    toggle={toggle}\n              />\n              <ModalBody \n                  className=\"ModalBody\"\n              >\n                Click data points (colored circles) for more data on that reading\n              </ModalBody>\n          </Modal>\n          <Nav selectedDates={selectedDates} setSelectedDates={setSelectedDates} glucoseData={glucoseData}/>\n          <Graph selectedDates={selectedDates} glucoseData={glucoseData} glucoseRanges={glucoseRanges}/>\n        </div>\n      : \n        <h1 id=\"Loading\">\n          Loading...\n        </h1>\n      }\n    </>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}